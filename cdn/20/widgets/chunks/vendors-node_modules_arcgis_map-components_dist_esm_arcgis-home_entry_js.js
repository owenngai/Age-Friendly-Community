"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_arcgis_map-components_dist_esm_arcgis-home_entry_js"],{

/***/ "./node_modules/@arcgis/map-components/dist/esm/arcgis-home.entry.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/arcgis-home.entry.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_home: () => (/* binding */ ArcgisHome)
/* harmony export */ });
/* harmony import */ var _index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-6e172aac.js */ "./node_modules/@arcgis/map-components/dist/esm/index-6e172aac.js");
/* harmony import */ var _index_7d72018f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-7d72018f.js */ "./node_modules/@arcgis/map-components/dist/esm/index-7d72018f.js");
/* harmony import */ var _chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-WQTCUXBS-9ec3781a.js */ "./node_modules/@arcgis/map-components/dist/esm/chunk-WQTCUXBS-9ec3781a.js");
/* harmony import */ var _index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index-0bc55ca5.js */ "./node_modules/@arcgis/map-components/dist/esm/index-0bc55ca5.js");
/* harmony import */ var _component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./component-utils-23194f7c.js */ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js");
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */






const globalCss = {
    anchor: "esri-widget__anchor",
    anchorDisabled: "esri-widget__anchor--disabled",
    button: "esri-button",
    buttonDisabled: "esri-button--disabled",
    buttonHalf: "esri-button--half",
    buttonSecondary: "esri-button--secondary",
    buttonSmall: "esri-button--small",
    buttonTertiary: "esri-button--tertiary",
    buttonThird: "esri-button--third",
    disabled: "esri-disabled",
    disabledElement: "esri-disabled-element",
    empty: "esri-widget__content--empty",
    emptyIllustration: "esri-widget__content-illustration--empty",
    heading: "esri-widget__heading",
    hidden: "esri-hidden",
    input: "esri-input",
    interactive: "esri-interactive",
    loader: "esri-widget__loader",
    loaderAnimation: "esri-widget__loader-animation",
    loaderText: "esri-widget__loader-text",
    menu: "esri-menu",
    menuHeader: "esri-menu__header",
    menuItem: "esri-menu__list-item",
    menuItemActive: "esri-menu__list-item--active",
    menuItemFocus: "esri-menu__list-item--focus",
    menuList: "esri-menu__list",
    noBookmarksIcon: "esri-widget__no-bookmark-icon",
    panel: "esri-widget--panel",
    panelHeightOnly: "esri-widget--panel-height-only",
    primaryTick: "primary-tick",
    primaryTickAmPm: "primary-tick__ampm",
    primaryTickLabel: "primary-tick__label",
    rotating: "esri-rotating",
    secondaryTick: "secondary-tick",
    select: "esri-select",
    table: "esri-widget__table",
    ui: "esri-component",
    widget: "esri-widget",
    widgetButton: "esri-widget--button",
    widgetButtonActive: "esri-widget--button-active",
    widgetDisabled: "esri-widget--disabled",
};

// FIXME: auto-destroy viewModel?
/**
 * A controller for a mapping component that:
 * - loads the viewModel
 * - initializes the viewModel with the component's properties
 * - does two-way binding between view model and component properties
 * - re-emits the viewModel's events on the component
 * - type-checks everything âœ¨
 *
 * Documentation:
 * https://devtopia.esri.com/WebGIS/arcgis-web-components/blob/main/packages/map-components/src/controllers/useViewModel.md
 */
const makeViewModelController = (loadViewModel) => (component) => proxy(component, loadViewModel);
// REFACTOR: extract common logic into IntegrationController???
class ViewModelController extends _chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.A {
    hostConnected() {
        if (this.component.manager.didLoadCalled)
            (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_4__.c)(this.component);
    }
    async hostLoad() {
        await super.hostLoad();
        this._watchMetaProperties();
        this._reEmitViewModelEvents();
    }
    // This can't be in hostLoad as childElem is only accessible after first render
    hostLoaded() {
        const { el } = this.component;
        const childNode = el.shadowRoot?.firstChild ?? el.firstChild ?? undefined;
        /*
         * On hot reloading, new this.component instance is created (so properties
         * are reset) but this.component.el instance is preserved (so properties are
         * preserved). Since childElem is re-parented on 1st hostLoad(),
         * for it to be accessible on the 2nd hostLoad() (hot reload), we have to
         * store it's reference on the el, rather than component
         */
        el.childElem = childNode ?? el.childElem;
        this.component.childElem = el.childElem;
        if (el.childElem === undefined && "production" !== "production")
            {}
        // Define the "view" property if not already present for compatibility with JS API
        if (!("view" in this.component))
            Object.defineProperty(this.component, "view", {
                get: () => this._instance.view,
                set: (view) => {
                    this._instance.view = view;
                    this.component.requestUpdate();
                },
            });
        (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_4__.c)(this.component);
        this.component.arcgisReady.emit();
    }
    _watchMetaProperties() {
        this.watch("position", (position) => {
            if (this.component.el.childElem != null && typeof position === "string")
                this.component.view?.ui.move(this.component.el.childElem, position);
        });
        this.watch("referenceElement", (referenceElement) => void (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_4__.r)(this.component, referenceElement).catch(console.error));
    }
    _reEmitViewModelEvents() {
        const isEvented = "on" in this._instance && typeof this._instance.on === "function";
        if (!isEvented)
            return;
        const eventTarget = this._instance;
        Object.entries(this.component).forEach(([key, unknown]) => {
            const value = unknown;
            if (!key.startsWith("viewModel") ||
                key === "viewModel" ||
                typeof value !== "object" ||
                value === null ||
                !("emit" in value) ||
                typeof value.emit !== "function")
                return;
            const emit = value.emit;
            const trimmedEventName = key.slice("viewModel".length);
            const capitalizedEventName = (0,_index_7d72018f_js__WEBPACK_IMPORTED_MODULE_1__.k)(trimmedEventName);
            const eventName = `${capitalizedEventName[0].toLowerCase()}${capitalizedEventName.slice(1)}`;
            this.onLifecycle(() => this.reactiveUtils.on(() => eventTarget, eventName, emit));
        });
    }
    hostDisconnected() {
        if (typeof this.component.el.childElem === "object")
            this.component.view?.ui.remove(this.component.el.childElem);
    }
}
const proxy = (0,_chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.p)(ViewModelController);

// TODO: [MIGRATION] migrate tests
const css = {
    base: "esri-home",
};
const useHomeViewModel = makeViewModelController(_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_3__.H);
const ArcgisHome = class {
    constructor(hostRef) {
        (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisReady = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisReady", 7);
        this.viewModelGo = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisHomeGo", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = (0,_chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.u)(this);
        this.messages = (0,_chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.c)();
        this.reactiveUtils = (0,_chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.l)(_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_3__.i);
        this.viewModel = useHomeViewModel(this);
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this._go = () => {
            const { viewModel } = this;
            if (viewModel.state === "going-home")
                viewModel.cancelGo();
            else
                viewModel.go();
        };
        this.goToOverride = this.viewModel.goToOverride;
        this.icon = "home";
        this.label = undefined;
        this.position = "top-left";
        this.referenceElement = undefined;
        this.viewpoint = this.viewModel.viewpoint;
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * This function provides the ability to interrupt and cancel the process
     * of navigating the view back to the view's initial extent.
     *
     * @since 4.9
     */
    async cancelGo() {
        this.viewModel.cancelGo();
    }
    /**
     * Animates the view to the initial Viewpoint of the view or the
     * value of `viewpoint`
     */
    async go() {
        return this.viewModel.go();
    }
    render() {
        const { messages, icon } = this;
        const state = this.viewModel?.state;
        const isLoading = state === "going-home";
        return ((0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: (0,_index_7d72018f_js__WEBPACK_IMPORTED_MODULE_1__.c)(css.base, globalCss.widget) }, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: globalCss.widgetButton, disabled: state === "disabled", "icon-start": isLoading ? undefined : icon, kind: "neutral", label: messages.componentLabel, onClick: this._go,
            // Workaround for https://github.com/Esri/calcite-design-system/issues/8490
            scale: isLoading ? "s" : "m", title: state === "going-home" ? messages.cancel : messages.title }, isLoading ? (
        // Cannot use calcite-button's loading=true. See https://devtopia.esri.com/WebGIS/arcgis-js-api/pull/58358#discussion_r1106927
        (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { inline: true, label: "" })) : null)));
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};




/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addHandles),
/* harmony export */   b: () => (/* binding */ isNotSameViewpoint),
/* harmony export */   c: () => (/* binding */ checkForView),
/* harmony export */   d: () => (/* binding */ checkForExpand),
/* harmony export */   e: () => (/* binding */ isNotSameCamera),
/* harmony export */   f: () => (/* binding */ isNotSameEnvironment),
/* harmony export */   g: () => (/* binding */ isValidInteger),
/* harmony export */   i: () => (/* binding */ isNullOrEmptyString),
/* harmony export */   r: () => (/* binding */ referenceElementHelper)
/* harmony export */ });
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
function checkForExpand(element) {
    const expandRef = element.el.closest("arcgis-expand") ?? element.expandElem;
    if (expandRef?.widget) {
        element.view = expandRef.view;
        expandRef.widget.content = element.childElem ?? element.el;
        // TODO: Update to be expandIcon = widget.icon, not ready yet in 4.27next
        if (!expandRef.expandIcon) {
            expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
        }
        return true;
    }
    if (expandRef) {
        const widgetHandler = () => {
            expandRef.removeEventListener("arcgisExpandReady", widgetHandler, false);
            element.view = expandRef.view;
            expandRef.widget.content = element.childElem ?? element.el;
            if (!expandRef.expandIcon) {
                expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
            }
        };
        expandRef.addEventListener("arcgisExpandReady", widgetHandler, false);
        return true;
    }
    return false;
}

//--------------------------------------------------------------------------
//
//  Public Methods
//
//--------------------------------------------------------------------------
function addHandles(element, handle) {
    if (Array.isArray(handle)) {
        element._watchHandles = [...element._watchHandles, ...handle];
    }
    else {
        element._watchHandles.push(handle);
    }
}
function checkForView(element) {
    let isUsingReferenceElement = false;
    if (!checkForExpand(element)) {
        let viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (!viewRef && typeof element.referenceElement === "string") {
            viewRef = document.querySelector(element.referenceElement);
            isUsingReferenceElement = true;
        }
        if (viewRef?.view) {
            element.view = viewRef.view;
            const el = element.childElem ?? element.el;
            if (!isUsingReferenceElement) {
                element.view.ui.add(el, element.position);
            }
        }
        else if (viewRef) {
            waitForViewHandler(viewRef, element, isUsingReferenceElement);
        }
    }
    else {
        const viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (viewRef?.view) {
            element.view = viewRef.view;
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                element.view = viewRef.view;
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    }
}
function isNullOrEmptyString(value) {
    return value === undefined || value === null || value === "";
}
function isValidInteger(value) {
    return value != null && value % 1 === 0;
}
function isNotSameCamera(camera, camera2) {
    return (camera2 === undefined ||
        camera.position !== camera2.position ||
        camera.heading !== camera2.heading ||
        camera.tilt !== camera2.tilt);
}
function isNotSameEnvironment(environment, environment2) {
    return (environment2 === undefined ||
        environment2.atmosphereEnabled !== environment.atmosphereEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.directShadowsEnabled !==
            environment.lighting.directShadowsEnabled ||
        environment2.lighting.cameraTrackingEnabled !==
            environment.lighting.cameraTrackingEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.displayUTCOffset !==
            environment.lighting.displayUTCOffset);
}
function isNotSameViewpoint(viewpoint, viewpoint2) {
    return (viewpoint2 === undefined ||
        viewpoint.targetGeometry !== viewpoint2.targetGeometry ||
        viewpoint.rotation !== viewpoint2.rotation ||
        viewpoint.scale !== viewpoint2.scale);
}
async function updateForView(viewStr) {
    const viewRef = document.querySelector(viewStr);
    return await new Promise((resolve) => {
        if (viewRef?.view !== undefined) {
            resolve(viewRef.view);
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                resolve(viewRef.view);
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    });
}
async function referenceElementHelper(element, refElement) {
    if (refElement === undefined)
        return;
    else if (typeof refElement === "string") {
        element.view = await updateForView(refElement);
    }
    else if (element.widget) {
        element.view = refElement.view;
    }
}
//--------------------------------------------------------------------------
//
//  Private Methods
//
//--------------------------------------------------------------------------
function waitForViewHandler(viewRef, element, isUsingRefernceElement) {
    const handler = () => {
        viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
        element.view = viewRef.view;
        if (!isUsingRefernceElement) {
            element.view.ui.add(element.childElem ?? element.el, element.position);
        }
    };
    viewRef.addEventListener("arcgisViewReadyChange", handler, false);
}




/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/esm/index-7d72018f.js":
/*!************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/index-7d72018f.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ classes),
/* harmony export */   k: () => (/* binding */ kebabToPascal)
/* harmony export */ });
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
// src/array-utils.ts

// src/css-utils.ts
function classes(...classes2) {
  const effectiveClasses = [];
  for (let i = 0; i < classes2.length; i++) {
    const arg = classes2[i];
    if (typeof arg === "string") {
      effectiveClasses.push(arg);
    } else if (Array.isArray(arg)) {
      effectiveClasses.push.apply(effectiveClasses, arg);
    } else if (typeof arg === "object") {
      for (const prop in arg) {
        if (arg[prop]) {
          effectiveClasses.push(prop);
        }
      }
    }
  }
  const className = effectiveClasses.join(" ");
  effectiveClasses.length = 0;
  return className;
}

// src/text.ts
var kebabToPascal = (name) => name.split("-").map((part) => (part[0]?.toLocaleUpperCase() ?? "") + part.slice(1)).join("");
var capitalize = (string) => string.charAt(0).toUpperCase() + string.slice(1);
var camelToHuman = (value) => capitalize(value.replaceAll(/([a-z])([A-Z])/gu, "$1 $2"));
new Proxy(
  {},
  {
    get: (_target, property) => camelToHuman(property.toString())
  }
);




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,