"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_arcgis_map-components_dist_esm_arcgis-editor_entry_js"],{

/***/ "./node_modules/@arcgis/map-components/dist/esm/arcgis-editor.entry.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/arcgis-editor.entry.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_editor: () => (/* binding */ ArcgisEditor)
/* harmony export */ });
/* harmony import */ var _index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-6e172aac.js */ "./node_modules/@arcgis/map-components/dist/esm/index-6e172aac.js");
/* harmony import */ var _index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-0bc55ca5.js */ "./node_modules/@arcgis/map-components/dist/esm/index-0bc55ca5.js");
/* harmony import */ var _component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component-utils-23194f7c.js */ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js");
/* harmony import */ var _disconnected_6cf1c100_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./disconnected-6cf1c100.js */ "./node_modules/@arcgis/map-components/dist/esm/disconnected-6cf1c100.js");
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */





const editorCss = "";

const ArcgisEditor = class {
    constructor(hostRef) {
        (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisEditorReady = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisEditorReady", 7);
        this.arcgisPropertyChange = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPropertyChange", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.activeWorkflow = undefined;
        this.allowedWorkflows = undefined;
        this.icon = undefined;
        this.labelOptions = undefined;
        this.layerInfos = undefined;
        this.snappingOptions = undefined;
        this.supportingWidgetDefaults = undefined;
        this.tooltipOptions = undefined;
        this.visibleElementsCreateFeaturesSection = true;
        this.visibleElementsEditFeaturesSection = true;
        this.visibleElementsLabelsToggle = true;
        this.visibleElementsTooltipsToggle = true;
        this.visibleElementsSnappingControls = true;
        this.visibleElementsSnappingControlsHeader = true;
        this.visibleElementsSnappingControlsEnabledToggle = true;
        this.visibleElementsSnappingControlsSelfEnabledToggle = true;
        this.visibleElementsSnappingControlsFeatureEnabledToggle = true;
        this.visibleElementsSnappingControlsLayerList = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.r)(this, value);
    }
    allowedWorkflowsWatcher(value) {
        if (this.widget) {
            this.widget.allowedWorkflows = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    labelOptionsWatcher(value) {
        if (this.widget) {
            this.widget.labelOptions = value;
        }
    }
    layerInfosWatcher(value) {
        if (this.widget) {
            this.widget.layerInfos = value;
        }
    }
    snappingOptionsWatcher(value) {
        if (this.widget) {
            this.widget.snappingOptions = value;
        }
    }
    supportingWidgetDefaultsWatcher(value) {
        if (this.widget) {
            this.widget.supportingWidgetDefaults = value;
        }
    }
    tooltipOptionsWatcher(value) {
        if (this.widget) {
            this.widget.tooltipOptions = value;
        }
    }
    visibleElementsCreateFeaturesSectionWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                createFeaturesSection: value,
            };
        }
    }
    visibleElementsEditFeaturesSectionWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                editFeaturesSection: value,
            };
        }
    }
    visibleElementsLabelsToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                labelsToggle: value,
            };
        }
    }
    visibleElementsTooltipsToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                tooltipsToggle: value,
            };
        }
    }
    visibleElementsSnappingControlsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControls: value,
            };
        }
    }
    visibleElementsSnappingControlsHeaderWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    ...this.widget.visibleElements.snappingControlsElements,
                    header: value,
                },
            };
        }
    }
    visibleElementsSnappingControlsEnabledToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    ...this.widget.visibleElements.snappingControlsElements,
                    enabledToggle: value,
                },
            };
        }
    }
    visibleElementsSnappingControlsSelfEnabledToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    ...this.widget.visibleElements.snappingControlsElements,
                    selfEnabledToggle: value,
                },
            };
        }
    }
    visibleElementsSnappingControlsFeatureEnabledToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    ...this.widget.visibleElements.snappingControlsElements,
                    featureEnabledToggle: value,
                },
            };
        }
    }
    visibleElementsSnappingControlsLayerListWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                snappingControlsElements: {
                    ...this.widget.visibleElements.snappingControlsElements,
                    layerList: value,
                },
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async cancelWorkflow() {
        await this.widget?.cancelWorkflow();
    }
    async deleteFeatureFromWorkflow() {
        await this.widget?.deleteFeatureFromWorkflow();
    }
    async startCreateFeaturesWorkflowAtFeatureCreation(info) {
        await this.widget?.startCreateFeaturesWorkflowAtFeatureCreation(info);
    }
    async startCreateFeaturesWorkflowAtFeatureTypeSelection() {
        await this.widget?.startCreateFeaturesWorkflowAtFeatureTypeSelection();
    }
    async startUpdateWorkflowAtFeatureEdit(feature) {
        await this.widget?.startUpdateWorkflowAtFeatureEdit(feature);
    }
    async startUpdateWorkflowAtFeatureSelection() {
        await this.widget?.startUpdateWorkflowAtFeatureSelection();
    }
    async startUpdateWorkflowAtMultipleFeatureSelection(candidates) {
        await this.widget?.startUpdateWorkflowAtMultipleFeatureSelection(candidates);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.v)(params);
        this.widget = widget;
        await this._addWatchers();
        this._addContainer();
        this.arcgisEditorReady.emit();
        (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.c)(this);
    }
    disconnectedCallback() {
        (0,_disconnected_6cf1c100_js__WEBPACK_IMPORTED_MODULE_3__.o)(this);
    }
    render() {
        return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    async _addWatchers() {
        const { watch } = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.i)();
        (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.a)(this, watch(() => this.widget.activeWorkflow, (value) => {
            this.activeWorkflow = value;
            this.arcgisPropertyChange.emit({ name: "activeWorkflow" });
        }, {
            initial: true,
        }));
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            createFeaturesSection: this.visibleElementsCreateFeaturesSection,
            editFeaturesSection: this.visibleElementsEditFeaturesSection,
            labelsToggle: this.visibleElementsLabelsToggle,
            tooltipsToggle: this.visibleElementsTooltipsToggle,
            snappingControls: this.visibleElementsSnappingControls,
            snappingControlsElements: {
                header: this.visibleElementsSnappingControlsHeader,
                enabledToggle: this.visibleElementsSnappingControlsEnabledToggle,
                selfEnabledToggle: this.visibleElementsSnappingControlsSelfEnabledToggle,
                featureEnabledToggle: this.visibleElementsSnappingControlsFeatureEnabledToggle,
                layerList: this.visibleElementsSnappingControlsLayerList,
            },
        };
        if (this.allowedWorkflows) {
            params.allowedWorkflows = this.allowedWorkflows;
        }
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.labelOptions) {
            params.labelOptions = this.labelOptions;
        }
        if (this.layerInfos) {
            params.layerInfos = this.layerInfos;
        }
        if (this.snappingOptions) {
            params.snappingOptions = this.snappingOptions;
        }
        if (this.supportingWidgetDefaults) {
            params.supportingWidgetDefaults = this.supportingWidgetDefaults;
        }
        if (this.tooltipOptions) {
            params.tooltipOptions = this.tooltipOptions;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    get el() { return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "allowedWorkflows": ["allowedWorkflowsWatcher"],
        "icon": ["iconWatcher"],
        "labelOptions": ["labelOptionsWatcher"],
        "layerInfos": ["layerInfosWatcher"],
        "snappingOptions": ["snappingOptionsWatcher"],
        "supportingWidgetDefaults": ["supportingWidgetDefaultsWatcher"],
        "tooltipOptions": ["tooltipOptionsWatcher"],
        "visibleElementsCreateFeaturesSection": ["visibleElementsCreateFeaturesSectionWatcher"],
        "visibleElementsEditFeaturesSection": ["visibleElementsEditFeaturesSectionWatcher"],
        "visibleElementsLabelsToggle": ["visibleElementsLabelsToggleWatcher"],
        "visibleElementsTooltipsToggle": ["visibleElementsTooltipsToggleWatcher"],
        "visibleElementsSnappingControls": ["visibleElementsSnappingControlsWatcher"],
        "visibleElementsSnappingControlsHeader": ["visibleElementsSnappingControlsHeaderWatcher"],
        "visibleElementsSnappingControlsEnabledToggle": ["visibleElementsSnappingControlsEnabledToggleWatcher"],
        "visibleElementsSnappingControlsSelfEnabledToggle": ["visibleElementsSnappingControlsSelfEnabledToggleWatcher"],
        "visibleElementsSnappingControlsFeatureEnabledToggle": ["visibleElementsSnappingControlsFeatureEnabledToggleWatcher"],
        "visibleElementsSnappingControlsLayerList": ["visibleElementsSnappingControlsLayerListWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisEditor.style = editorCss;




/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addHandles),
/* harmony export */   b: () => (/* binding */ isNotSameViewpoint),
/* harmony export */   c: () => (/* binding */ checkForView),
/* harmony export */   d: () => (/* binding */ checkForExpand),
/* harmony export */   e: () => (/* binding */ isNotSameCamera),
/* harmony export */   f: () => (/* binding */ isNotSameEnvironment),
/* harmony export */   g: () => (/* binding */ isValidInteger),
/* harmony export */   i: () => (/* binding */ isNullOrEmptyString),
/* harmony export */   r: () => (/* binding */ referenceElementHelper)
/* harmony export */ });
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
function checkForExpand(element) {
    const expandRef = element.el.closest("arcgis-expand") ?? element.expandElem;
    if (expandRef?.widget) {
        element.view = expandRef.view;
        expandRef.widget.content = element.childElem ?? element.el;
        // TODO: Update to be expandIcon = widget.icon, not ready yet in 4.27next
        if (!expandRef.expandIcon) {
            expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
        }
        return true;
    }
    if (expandRef) {
        const widgetHandler = () => {
            expandRef.removeEventListener("arcgisExpandReady", widgetHandler, false);
            element.view = expandRef.view;
            expandRef.widget.content = element.childElem ?? element.el;
            if (!expandRef.expandIcon) {
                expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
            }
        };
        expandRef.addEventListener("arcgisExpandReady", widgetHandler, false);
        return true;
    }
    return false;
}

//--------------------------------------------------------------------------
//
//  Public Methods
//
//--------------------------------------------------------------------------
function addHandles(element, handle) {
    if (Array.isArray(handle)) {
        element._watchHandles = [...element._watchHandles, ...handle];
    }
    else {
        element._watchHandles.push(handle);
    }
}
function checkForView(element) {
    let isUsingReferenceElement = false;
    if (!checkForExpand(element)) {
        let viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (!viewRef && typeof element.referenceElement === "string") {
            viewRef = document.querySelector(element.referenceElement);
            isUsingReferenceElement = true;
        }
        if (viewRef?.view) {
            element.view = viewRef.view;
            const el = element.childElem ?? element.el;
            if (!isUsingReferenceElement) {
                element.view.ui.add(el, element.position);
            }
        }
        else if (viewRef) {
            waitForViewHandler(viewRef, element, isUsingReferenceElement);
        }
    }
    else {
        const viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (viewRef?.view) {
            element.view = viewRef.view;
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                element.view = viewRef.view;
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    }
}
function isNullOrEmptyString(value) {
    return value === undefined || value === null || value === "";
}
function isValidInteger(value) {
    return value != null && value % 1 === 0;
}
function isNotSameCamera(camera, camera2) {
    return (camera2 === undefined ||
        camera.position !== camera2.position ||
        camera.heading !== camera2.heading ||
        camera.tilt !== camera2.tilt);
}
function isNotSameEnvironment(environment, environment2) {
    return (environment2 === undefined ||
        environment2.atmosphereEnabled !== environment.atmosphereEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.directShadowsEnabled !==
            environment.lighting.directShadowsEnabled ||
        environment2.lighting.cameraTrackingEnabled !==
            environment.lighting.cameraTrackingEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.displayUTCOffset !==
            environment.lighting.displayUTCOffset);
}
function isNotSameViewpoint(viewpoint, viewpoint2) {
    return (viewpoint2 === undefined ||
        viewpoint.targetGeometry !== viewpoint2.targetGeometry ||
        viewpoint.rotation !== viewpoint2.rotation ||
        viewpoint.scale !== viewpoint2.scale);
}
async function updateForView(viewStr) {
    const viewRef = document.querySelector(viewStr);
    return await new Promise((resolve) => {
        if (viewRef?.view !== undefined) {
            resolve(viewRef.view);
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                resolve(viewRef.view);
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    });
}
async function referenceElementHelper(element, refElement) {
    if (refElement === undefined)
        return;
    else if (typeof refElement === "string") {
        element.view = await updateForView(refElement);
    }
    else if (element.widget) {
        element.view = refElement.view;
    }
}
//--------------------------------------------------------------------------
//
//  Private Methods
//
//--------------------------------------------------------------------------
function waitForViewHandler(viewRef, element, isUsingRefernceElement) {
    const handler = () => {
        viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
        element.view = viewRef.view;
        if (!isUsingRefernceElement) {
            element.view.ui.add(element.childElem ?? element.el, element.position);
        }
    };
    viewRef.addEventListener("arcgisViewReadyChange", handler, false);
}




/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/esm/disconnected-6cf1c100.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/disconnected-6cf1c100.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: () => (/* binding */ onDisconnectedHelper)
/* harmony export */ });
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
function onDisconnectedHelper(element) {
    if (element.childElem) {
        if (!element.el.isConnected) {
            if (element.view) {
                element.view.ui.remove(element.childElem);
            }
            else if (element.widget?.view) {
                element.widget.view.ui.remove(element.childElem);
            }
            if (element._watchHandles) {
                element._watchHandles.forEach((handle) => {
                    handle.remove();
                });
            }
            element._watchHandles = [];
            element.widget?.destroy();
        }
    }
    else {
        setTimeout(() => {
            if (!element.el.isConnected) {
                if (element.view) {
                    element.view.ui.remove(element.el);
                }
                else if (element.widget?.view) {
                    element.widget.view.ui.remove(element.el);
                }
                if (element._watchHandles) {
                    element._watchHandles.forEach((handle) => {
                        handle.remove();
                    });
                }
                element._watchHandles = [];
                element.widget?.destroy();
            }
        }, 1000);
    }
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,