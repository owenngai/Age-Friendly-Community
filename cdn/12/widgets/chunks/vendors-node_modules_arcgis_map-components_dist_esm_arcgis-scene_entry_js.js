"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_arcgis_map-components_dist_esm_arcgis-scene_entry_js"],{

/***/ "./node_modules/@arcgis/map-components/dist/esm/arcgis-scene.entry.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/arcgis-scene.entry.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_scene: () => (/* binding */ ArcgisScene)
/* harmony export */ });
/* harmony import */ var _index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-6e172aac.js */ "./node_modules/@arcgis/map-components/dist/esm/index-6e172aac.js");
/* harmony import */ var _index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-0bc55ca5.js */ "./node_modules/@arcgis/map-components/dist/esm/index-0bc55ca5.js");
/* harmony import */ var _component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component-utils-23194f7c.js */ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js");
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */




const sceneCss = ".arcgis-scene{padding:0;margin:0;height:100%;width:100%}";

const ArcgisScene = class {
    constructor(hostRef) {
        (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisViewReadyChange = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewReadyChange", 7);
        this.arcgisViewChange = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewChange", 7);
        this.arcgisViewClick = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewClick", 7);
        this.arcgisViewDoubleClick = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewDoubleClick", 7);
        this.arcgisViewDrag = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewDrag", 7);
        this.arcgisViewHold = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewHold", 7);
        this.arcgisViewImmediateClick = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewImmediateClick", 7);
        this.arcgisViewImmediateDoubleClick = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewImmediateDoubleClick", 7);
        this.arcgisViewKeyDown = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewKeyDown", 7);
        this.arcgisViewKeyUp = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewKeyUp", 7);
        this.arcgisViewLayerviewCreate = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewLayerviewCreate", 7);
        this.arcgisViewLayerviewCreateError = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewLayerviewCreateError", 7);
        this.arcgisViewLayerviewDestroy = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewLayerviewDestroy", 7);
        this.arcgisViewMouseWheel = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewMouseWheel", 7);
        this.arcgisViewPointerDown = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewPointerDown", 7);
        this.arcgisViewPointerEnter = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewPointerEnter", 7);
        this.arcgisViewPointerLeave = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewPointerLeave", 7);
        this.arcgisViewPointerMove = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewPointerMove", 7);
        this.arcgisViewPointerUp = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisViewPointerUp", 7);
        this._watchHandles = [];
        this.allLayerViews = undefined;
        this.alphaCompositingEnabled = false;
        this.analyses = undefined;
        this.basemapView = undefined;
        this.basemap = undefined;
        this.camera = undefined;
        this.center = undefined;
        this.clippingArea = undefined;
        this.constraints = undefined;
        this.destroyDisabled = false;
        this.environment = undefined;
        this.extent = undefined;
        this.fatalError = undefined;
        this.floors = undefined;
        this.gamepad = undefined;
        this.graphics = undefined;
        this.ground = undefined;
        this.groundView = undefined;
        this.highlightOptions = undefined;
        this.interacting = false;
        this.itemId = undefined;
        this.layerViews = undefined;
        this.magnifier = undefined;
        this.map = undefined;
        this.navigating = false;
        this.navigation = undefined;
        this.padding = undefined;
        this.performanceInfo = undefined;
        this.popup = undefined;
        this.popupEnabled = true;
        this.qualityProfile = undefined;
        this.ready = false;
        this.resolution = undefined;
        this.scale = undefined;
        this.spatialReference = undefined;
        this.stationary = undefined;
        this.suspended = false;
        this.theme = undefined;
        this.timeExtent = undefined;
        this.toMap = undefined;
        this.toScreen = undefined;
        this.updating = false;
        this.viewingMode = "global";
        this.viewpoint = undefined;
        this.zoom = undefined;
        this.view = undefined;
    }
    alphaCompositingEnabledWatcher(value) {
        if (value !== undefined && this.view) {
            this.view.alphaCompositingEnabled = value;
        }
    }
    basemapWatcher(value) {
        if (typeof value === "string" && this.view?.map && !(0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.i)(value)) {
            this.view.map.basemap = value;
        }
        else if (this.view?.map) {
            this.view.map.basemap = value;
        }
    }
    cameraWatcher(value) {
        if (this.view && value && (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.e)(this.view.camera, value)) {
            this.view.camera = value;
        }
    }
    centerWatcher(value, old) {
        if (value !== old && this.view) {
            if (typeof value === "string") {
                // check if center is string
                const center = value.split(",").map((x) => Number(x));
                if (center[0] !== this.view.center.longitude && center[1] !== this.view.center.latitude) {
                    this.view.center = center;
                }
            }
            else if (Array.isArray(value)) {
                // array
                if (value[0] !== this.view.center.longitude && value[1] !== this.view.center.latitude) {
                    this.view.center = value;
                }
            }
            else if (!this.view.center.equals(value)) {
                // finally a point
                this.view.center = value;
            }
        }
    }
    clippingAreaWatcher(value) {
        if (this.view && value && !this.view.clippingArea?.equals(value)) {
            this.view.clippingArea = value;
        }
    }
    constraintsWatcher(value) {
        if (this.view) {
            this.view.constraints = value;
        }
    }
    environmentWatcher(value) {
        if (this.view &&
            value &&
            (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.f)(this.view.environment, value)) {
            this.view.environment = value;
        }
    }
    extentWatcher(value) {
        if (this.view && value && !this.view.extent.equals(value)) {
            this.view.extent = value;
        }
    }
    floorsWatcher(value) {
        if (this.view) {
            this.view.floors = value;
        }
    }
    graphicsWatcher(value) {
        if (this.view) {
            this.view.graphics = value;
        }
    }
    groundWatcher(value) {
        if (this.view?.map && !(0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.i)(value)) {
            this.view.map.ground = value;
        }
    }
    highlightOptionsWatcher(value) {
        if (this.view) {
            this.view.highlightOptions = value;
        }
    }
    itemIdWatcher(value, old) {
        // NOTE: there is an issue when users set the value to undefined.
        // https://github.com/ionic-team/stencil/issues/2814
        // If user sets `itemid` to `undefined`, Stencil 2 will log the following warning:
        // `The state/prop "${propName}" changed during rendering.`
        // `This can potentially lead to infinite-loops and other bugs.`
        //
        // It appears consumer setting the value to null does not cause this warning.
        // In Stencil 4, if a user sets property to undefined, will trigger change, but
        // will not remove attribute from DOM.
        if (value !== old) {
            if (this.view?.map) {
                void this._updateMap();
            }
            else {
                void this._loadMap();
            }
        }
    }
    mapWatcher(value) {
        if (this.view) {
            this.view.map = value;
        }
    }
    navigationWatcher(value) {
        if (this.view) {
            this.view.navigation = value;
        }
    }
    paddingWatcher(value) {
        if (this.view) {
            this.view.padding = value;
        }
    }
    popupWatcher(value) {
        if (this.view) {
            this.view.popup = value;
        }
    }
    popupEnabledWatcher(value, old) {
        if (value !== old && this.view) {
            this.view.popupEnabled = value;
        }
    }
    qualityProfileWatcher(value) {
        if (this.view && this.view.qualityProfile !== value) {
            this.view.qualityProfile = value;
        }
    }
    scaleWatcher(value, old) {
        if (this.view && this.view.stationary && !this.view.interacting && value != null && value !== old) {
            this.view.scale = value;
        }
    }
    spatialReferenceWatcher(value) {
        if (this.view && value && !this.view.spatialReference.equals(value)) {
            this.view.spatialReference = value;
        }
    }
    themeWatcher(value) {
        if (this.view) {
            this.view.theme = value;
        }
    }
    timeExtentWatcher(value) {
        if (this.view) {
            this.view.timeExtent = value;
        }
    }
    viewingModeWatcher(value) {
        if (this.view) {
            this.view.viewingMode = value;
        }
    }
    viewpointWatcher(value) {
        if (this.view && (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.b)(this.view.viewpoint, value)) {
            this.view.viewpoint = value;
        }
    }
    zoomWatcher(value, old) {
        if (this.view && this.view.stationary && !this.view.interacting && value !== old && (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.g)(value)) {
            this.view.zoom = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async closePopup() {
        this.view?.closePopup();
    }
    async destroy() {
        if (this.destroyDisabled) {
            this._clearWatchHandles();
            this.view.destroy();
        }
    }
    async goTo(target, options) {
        return (await this.view?.goTo(target, options));
    }
    async hitTest(screenPoint, options) {
        return await this.view?.hitTest(screenPoint, options);
    }
    async openPopup(options) {
        return (await this.view?.openPopup(options));
    }
    async takeScreenshot(options) {
        return await this.view?.takeScreenshot(options);
    }
    async tryFatalErrorRecovery() {
        this.view?.tryFatalErrorRecovery();
    }
    async whenAnalysisView(analysis) {
        return await this.view?.whenAnalysisView(analysis);
    }
    async whenLayerView(layer) {
        return await this.view?.whenLayerView(layer);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        if (!this.view) {
            await this._loadMap();
        }
    }
    componentDidRender() {
        if (this.view && !this.view.container) {
            this.view.container = this.el;
        }
    }
    componentDidLoad() {
        this._proxyEvents();
    }
    disconnectedCallback() {
        void this.destroy();
    }
    render() {
        return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "arcgis-scene", ref: (el) => (this.el = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _clearWatchHandles() {
        this._watchHandles.forEach((handle) => handle.remove());
        this._watchHandles = [];
    }
    async _addWatchers() {
        const { watch, when } = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.i)();
        (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.a)(this, [
            // watch for stationary and emit arcgisViewChange event
            watch(() => this.view.stationary, () => {
                this.stationary = this.view.stationary;
                this.interacting = this.view.interacting;
                this.navigating = this.view.navigating;
                this.arcgisViewChange.emit();
            }, {
                initial: true,
            }),
            // when view stationary is true, update these props:
            // zoom, scale, center, rotation, extent, camera, viewpoint
            when(() => this.view.stationary, () => {
                this.camera = this.view.camera;
                this.center = this.view.center;
                this.extent = this.view.extent;
                this.scale = this.view.scale;
                this.viewpoint = this.view.viewpoint;
                this.zoom = this.view.zoom;
                this.spatialReference = this.view.spatialReference;
            }),
            // watchers for other props to update component
            watch(() => this.view.allLayerViews, () => {
                this.allLayerViews = this.view.allLayerViews;
            }, {
                initial: true,
            }),
            watch(() => this.view.analyses, () => {
                this.analyses = this.view.analyses;
            }, {
                initial: true,
            }),
            watch(() => this.view.map?.basemap, () => {
                this.basemap = this.view.map?.basemap;
            }, {
                initial: true,
            }),
            watch(() => this.view.basemapView, () => {
                this.basemapView = this.view.basemapView;
            }, {
                initial: true,
            }),
            watch(() => this.view.environment, () => {
                this.environment = this.view.environment;
            }, {
                initial: true,
            }),
            watch(() => this.view.fatalError, () => {
                this.fatalError = this.view.fatalError;
            }, {
                initial: true,
            }),
            watch(() => this.view.input.gamepad, () => {
                this.gamepad = this.view.input.gamepad;
            }, {
                initial: true,
            }),
            watch(() => this.view.graphics, () => {
                this.graphics = this.view.graphics;
            }, {
                initial: true,
            }),
            watch(() => this.view.map?.ground, () => {
                this.ground = this.view.map?.ground;
            }, {
                initial: true,
            }),
            watch(() => this.view.groundView, () => {
                this.groundView = this.view.groundView;
            }, {
                initial: true,
            }),
            // Start: arcgisStationaryChange events
            watch(() => this.view.interacting, () => {
                this.interacting = this.view.interacting;
            }),
            watch(() => this.view.navigating, () => {
                this.navigating = this.view.navigating;
            }),
            watch(() => this.view.stationary, () => {
                this.stationary = this.view.stationary;
            }),
            watch(() => this.view.layerViews, () => {
                this.layerViews = this.view.layerViews;
            }, {
                initial: true,
            }),
            watch(() => this.view.navigation, () => {
                this.navigation = this.view.navigation;
            }, {
                initial: true,
            }),
            watch(() => this.view.map, () => {
                this.map = this.view.map;
            }, {
                initial: true,
            }),
            watch(() => this.view.performanceInfo, () => {
                this.performanceInfo = this.view.performanceInfo;
            }),
            watch(() => this.view.popup, () => {
                this.popup = this.view.popup;
            }, {
                initial: true,
            }),
            watch(() => this.view.qualityProfile, () => {
                this.qualityProfile = this.view.qualityProfile;
            }, {
                initial: true,
            }),
            watch(() => this.view.resolution, () => {
                this.resolution = this.view.resolution;
            }, {
                initial: true,
            }),
            watch(() => this.view.suspended, () => {
                this.suspended = this.view.suspended;
            }, {
                initial: true,
            }),
            watch(() => this.view.updating, () => {
                this.updating = this.view.updating;
            }, {
                initial: true,
            }),
            // watch for ready and emit arcgisViewReadyChange event
            watch(() => this.view.ready, () => {
                this.ready = this.view.ready;
                this.arcgisViewReadyChange.emit();
            }, {
                initial: true,
            }),
        ]);
    }
    async _createMap() {
        const mapParams = {};
        if (this.itemId) {
            mapParams.portalItem = await this._createPortalItem();
        }
        if (this.basemap) {
            mapParams.basemap = this.basemap;
        }
        else if ((0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.itemId)) {
            mapParams.basemap = "topo-vector";
        }
        if (this.ground) {
            mapParams.ground = this.ground;
        }
        else if ((0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.itemId)) {
            mapParams.ground = "world-elevation";
        }
        const map = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.R)(mapParams);
        return map;
    }
    async _createPortalItem() {
        const itemProps = {};
        if (this.itemId) {
            itemProps.id = this.itemId;
        }
        return itemProps;
    }
    _createViewParams() {
        const params = {};
        if (this.alphaCompositingEnabled !== undefined) {
            params.alphaCompositingEnabled = this.alphaCompositingEnabled;
        }
        if (this.center) {
            if (typeof this.center === "string") {
                params.center = this.center.split(",").map((x) => Number(x));
            }
            else {
                params.center = this.center;
            }
        }
        if (this.camera) {
            params.camera = this.camera;
        }
        if (this.clippingArea) {
            params.clippingArea = this.clippingArea;
        }
        if (this.constraints) {
            params.constraints = this.constraints;
        }
        if (this.environment) {
            params.environment = this.environment;
        }
        if (this.extent) {
            params.extent = this.extent;
        }
        if (this.floors) {
            params.floors = this.floors;
        }
        if (this.graphics) {
            params.graphics = this.graphics;
        }
        if (this.highlightOptions) {
            params.highlightOptions = this.highlightOptions;
        }
        if (this.map) {
            params.map = this.map;
        }
        if (this.navigation) {
            params.navigation = this.navigation;
        }
        if (this.padding) {
            params.padding = this.padding;
        }
        if (this.popup) {
            params.popup = this.popup;
        }
        if (this.popupEnabled !== undefined) {
            params.popupEnabled = this.popupEnabled;
        }
        if (this.qualityProfile) {
            params.qualityProfile = this.qualityProfile;
        }
        if (this.scale !== undefined) {
            params.scale = this.scale;
        }
        if (this.spatialReference) {
            params.spatialReference = this.spatialReference;
        }
        if (this.theme) {
            params.theme = this.theme;
        }
        if (this.timeExtent) {
            params.timeExtent = this.timeExtent;
        }
        if (this.viewingMode) {
            params.viewingMode = this.viewingMode;
        }
        if (this.viewpoint) {
            params.viewpoint = this.viewpoint;
        }
        if (this.zoom !== undefined) {
            params.zoom = this.zoom;
        }
        return params;
    }
    async _loadMap() {
        const map = await this._createMap();
        const params = this._createViewParams();
        const view = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.S)({
            map,
            ...params,
        });
        this.view = view;
        return void view.when(async () => {
            // proxy view functions
            this.toMap = view.toMap.bind(view);
            this.toScreen = view.toScreen.bind(view);
            await this._addWatchers();
        });
    }
    _proxyEvents() {
        (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.a)(this, [
            this.view.on("click", (event) => {
                this.arcgisViewClick.emit(event);
            }),
            this.view.on("double-click", (event) => {
                this.arcgisViewDoubleClick.emit(event);
            }),
            this.view.on("drag", (event) => {
                this.arcgisViewDrag.emit(event);
            }),
            this.view.on("hold", (event) => {
                this.arcgisViewHold.emit(event);
            }),
            this.view.on("immediate-click", (event) => {
                this.arcgisViewImmediateClick.emit(event);
            }),
            this.view.on("immediate-double-click", (event) => {
                this.arcgisViewImmediateDoubleClick.emit(event);
            }),
            this.view.on("key-down", (event) => {
                this.arcgisViewKeyDown.emit(event);
            }),
            this.view.on("key-up", (event) => {
                this.arcgisViewKeyUp.emit(event);
            }),
            this.view.on("layerview-create", (event) => {
                this.arcgisViewLayerviewCreate.emit(event);
            }),
            this.view.on("layerview-create-error", (event) => {
                this.arcgisViewLayerviewCreateError.emit(event);
            }),
            this.view.on("layerview-destroy", (event) => {
                this.arcgisViewLayerviewDestroy.emit(event);
            }),
            this.view.on("mouse-wheel", (event) => {
                this.arcgisViewMouseWheel.emit(event);
            }),
            this.view.on("pointer-down", (event) => {
                this.arcgisViewPointerDown.emit(event);
            }),
            this.view.on("pointer-enter", (event) => {
                this.arcgisViewPointerEnter.emit(event);
            }),
            this.view.on("pointer-leave", (event) => {
                this.arcgisViewPointerLeave.emit(event);
            }),
            this.view.on("pointer-move", (event) => {
                this.arcgisViewPointerMove.emit(event);
            }),
            this.view.on("pointer-up", (event) => {
                this.arcgisViewPointerUp.emit(event);
            }),
        ]);
    }
    async _updateMap() {
        if (this.view?.map) {
            this.view.map.destroy();
            const map = await this._createMap();
            this.view.map = map;
        }
    }
    get _hostElement() { return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "alphaCompositingEnabled": ["alphaCompositingEnabledWatcher"],
        "basemap": ["basemapWatcher"],
        "camera": ["cameraWatcher"],
        "center": ["centerWatcher"],
        "clippingArea": ["clippingAreaWatcher"],
        "constraints": ["constraintsWatcher"],
        "environment": ["environmentWatcher"],
        "extent": ["extentWatcher"],
        "floors": ["floorsWatcher"],
        "graphics": ["graphicsWatcher"],
        "ground": ["groundWatcher"],
        "highlightOptions": ["highlightOptionsWatcher"],
        "itemId": ["itemIdWatcher"],
        "map": ["mapWatcher"],
        "navigation": ["navigationWatcher"],
        "padding": ["paddingWatcher"],
        "popup": ["popupWatcher"],
        "popupEnabled": ["popupEnabledWatcher"],
        "qualityProfile": ["qualityProfileWatcher"],
        "scale": ["scaleWatcher"],
        "spatialReference": ["spatialReferenceWatcher"],
        "theme": ["themeWatcher"],
        "timeExtent": ["timeExtentWatcher"],
        "viewingMode": ["viewingModeWatcher"],
        "viewpoint": ["viewpointWatcher"],
        "zoom": ["zoomWatcher"]
    }; }
};
ArcgisScene.style = sceneCss;




/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addHandles),
/* harmony export */   b: () => (/* binding */ isNotSameViewpoint),
/* harmony export */   c: () => (/* binding */ checkForView),
/* harmony export */   d: () => (/* binding */ checkForExpand),
/* harmony export */   e: () => (/* binding */ isNotSameCamera),
/* harmony export */   f: () => (/* binding */ isNotSameEnvironment),
/* harmony export */   g: () => (/* binding */ isValidInteger),
/* harmony export */   i: () => (/* binding */ isNullOrEmptyString),
/* harmony export */   r: () => (/* binding */ referenceElementHelper)
/* harmony export */ });
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
function checkForExpand(element) {
    const expandRef = element.el.closest("arcgis-expand") ?? element.expandElem;
    if (expandRef?.widget) {
        element.view = expandRef.view;
        expandRef.widget.content = element.childElem ?? element.el;
        // TODO: Update to be expandIcon = widget.icon, not ready yet in 4.27next
        if (!expandRef.expandIcon) {
            expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
        }
        return true;
    }
    if (expandRef) {
        const widgetHandler = () => {
            expandRef.removeEventListener("arcgisExpandReady", widgetHandler, false);
            element.view = expandRef.view;
            expandRef.widget.content = element.childElem ?? element.el;
            if (!expandRef.expandIcon) {
                expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
            }
        };
        expandRef.addEventListener("arcgisExpandReady", widgetHandler, false);
        return true;
    }
    return false;
}

//--------------------------------------------------------------------------
//
//  Public Methods
//
//--------------------------------------------------------------------------
function addHandles(element, handle) {
    if (Array.isArray(handle)) {
        element._watchHandles = [...element._watchHandles, ...handle];
    }
    else {
        element._watchHandles.push(handle);
    }
}
function checkForView(element) {
    let isUsingReferenceElement = false;
    if (!checkForExpand(element)) {
        let viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (!viewRef && typeof element.referenceElement === "string") {
            viewRef = document.querySelector(element.referenceElement);
            isUsingReferenceElement = true;
        }
        if (viewRef?.view) {
            element.view = viewRef.view;
            const el = element.childElem ?? element.el;
            if (!isUsingReferenceElement) {
                element.view.ui.add(el, element.position);
            }
        }
        else if (viewRef) {
            waitForViewHandler(viewRef, element, isUsingReferenceElement);
        }
    }
    else {
        const viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (viewRef?.view) {
            element.view = viewRef.view;
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                element.view = viewRef.view;
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    }
}
function isNullOrEmptyString(value) {
    return value === undefined || value === null || value === "";
}
function isValidInteger(value) {
    return value != null && value % 1 === 0;
}
function isNotSameCamera(camera, camera2) {
    return (camera2 === undefined ||
        camera.position !== camera2.position ||
        camera.heading !== camera2.heading ||
        camera.tilt !== camera2.tilt);
}
function isNotSameEnvironment(environment, environment2) {
    return (environment2 === undefined ||
        environment2.atmosphereEnabled !== environment.atmosphereEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.directShadowsEnabled !==
            environment.lighting.directShadowsEnabled ||
        environment2.lighting.cameraTrackingEnabled !==
            environment.lighting.cameraTrackingEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.displayUTCOffset !==
            environment.lighting.displayUTCOffset);
}
function isNotSameViewpoint(viewpoint, viewpoint2) {
    return (viewpoint2 === undefined ||
        viewpoint.targetGeometry !== viewpoint2.targetGeometry ||
        viewpoint.rotation !== viewpoint2.rotation ||
        viewpoint.scale !== viewpoint2.scale);
}
async function updateForView(viewStr) {
    const viewRef = document.querySelector(viewStr);
    return await new Promise((resolve) => {
        if (viewRef?.view !== undefined) {
            resolve(viewRef.view);
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                resolve(viewRef.view);
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    });
}
async function referenceElementHelper(element, refElement) {
    if (refElement === undefined)
        return;
    else if (typeof refElement === "string") {
        element.view = await updateForView(refElement);
    }
    else if (element.widget) {
        element.view = refElement.view;
    }
}
//--------------------------------------------------------------------------
//
//  Private Methods
//
//--------------------------------------------------------------------------
function waitForViewHandler(viewRef, element, isUsingRefernceElement) {
    const handler = () => {
        viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
        element.view = viewRef.view;
        if (!isUsingRefernceElement) {
            element.view.ui.add(element.childElem ?? element.el, element.position);
        }
    };
    viewRef.addEventListener("arcgisViewReadyChange", handler, false);
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,