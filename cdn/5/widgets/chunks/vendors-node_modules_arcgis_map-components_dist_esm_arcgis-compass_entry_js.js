"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_arcgis_map-components_dist_esm_arcgis-compass_entry_js"],{

/***/ "./node_modules/@arcgis/map-components/dist/esm/arcgis-compass.entry.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/arcgis-compass.entry.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_compass: () => (/* binding */ ArcgisCompass)
/* harmony export */ });
/* harmony import */ var _index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-6e172aac.js */ "./node_modules/@arcgis/map-components/dist/esm/index-6e172aac.js");
/* harmony import */ var _index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-0bc55ca5.js */ "./node_modules/@arcgis/map-components/dist/esm/index-0bc55ca5.js");
/* harmony import */ var _chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-WQTCUXBS-9ec3781a.js */ "./node_modules/@arcgis/map-components/dist/esm/chunk-WQTCUXBS-9ec3781a.js");
/* harmony import */ var _index_7d72018f_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index-7d72018f.js */ "./node_modules/@arcgis/map-components/dist/esm/index-7d72018f.js");
/* harmony import */ var _component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./component-utils-23194f7c.js */ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js");
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */






// FIXME: auto-destroy widget?
/**
 * A controller for a wrapped JS API Widget
 * - loads the widget
 * - initializes the widget with the component's properties
 * - does two-way binding between widget and component properties
 * - re-emits the widgets's events on the component
 * - type-checks everything âœ¨
 *
 * Documentation:
 * https://devtopia.esri.com/WebGIS/arcgis-web-components/blob/main/packages/map-components/src/controllers/useWidget.md
 */
const makeWidgetController = (loadWidget, _options) => (component) => proxy(component, loadWidget);
class WidgetController extends _chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.A {
    constructor(component, _loadAccessor) {
        super(component, _loadAccessor);
        this._watchedViewModelProperties = new Set();
        this._watchedVisibleElementsProperties = {};
        Object.defineProperty(this.exports, "viewModel", {
            value: _chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.a.makeGetterProxy(component, this._watchedViewModelProperties),
        });
        Object.defineProperty(this.exports, "visibleElements", {
            value: this._makeVisibleElementsBinder(),
        });
    }
    hostConnected() {
        if (this.component.manager.didLoadCalled)
            (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_4__.c)(this.component);
    }
    async hostLoad() {
        this.component.render = () => (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null);
        /*
         * "viewModel" property might not have a @State(), so two-way binding might
         * not work (and probably one way is fine)
         */
        this._watchedProperties.delete("viewModel");
        await super.hostLoad();
        this._watchMetaProperties();
        this._reEmitWidgetEvents();
        // Do one way watching for viewModel property
        this.onLifecycle(() => this.reactiveUtils.watch(() => this._instance.viewModel, (newViewModel) => {
            this.component.viewModel = newViewModel;
        }, { initial: true }));
        const viewModel = this._instance.viewModel;
        if (typeof viewModel === "object") {
            _chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.a.watchComponentUpdates(this, viewModel, this._watchedViewModelProperties);
            _chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.a.watchAccessorUpdates(this, viewModel, this._watchedViewModelProperties);
            const parameters = _chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.a.gatherParameters(this, this._watchedViewModelProperties);
            viewModel.set(parameters);
        }
        else if (this._watchedViewModelProperties.size > 0)
            throw new Error(`The widget does not have a viewModel to bind to. Tried to bind the following properties: ${Array.from(this._watchedViewModelProperties).join(", ")}`);
        const visibleElements = Object.entries(this._watchedVisibleElementsProperties);
        if (visibleElements.length > 0) {
            this.onLifecycle(() => visibleElements.map(([prop, propertyChain]) => {
                let base = this._instance.visibleElements ?? {};
                let defaultVisible = undefined;
                for (const key of propertyChain.slice(0, -1)) {
                    if (typeof base[key] === "object" && base[key] !== null)
                        base = base[key];
                    else {
                        defaultVisible = Boolean(base[key]);
                        break;
                    }
                }
                if (defaultVisible === undefined)
                    defaultVisible = Boolean(base[propertyChain.slice(-1)[0]] ?? true);
                prop.startsWith("hide") ? !defaultVisible : defaultVisible;
                const hideShowInName = prop.startsWith("hide") || prop.startsWith("show");
                const shouldFlip = hideShowInName ? prop.startsWith("hide") : defaultVisible;
                const genericComponent = this.component;
                if (typeof genericComponent[prop] === "boolean")
                    this._updateWidgetVisibleElement(propertyChain, genericComponent[prop], shouldFlip);
                else
                    genericComponent[prop] = false;
                return this.watch(prop, (rawVisible) => this._updateWidgetVisibleElement(propertyChain, rawVisible, shouldFlip));
            }));
        }
    }
    _updateWidgetVisibleElement(propertyChain, propValue, shouldFlip) {
        let base = this._instance.visibleElements ?? {};
        for (const key of propertyChain.slice(0, -1)) {
            if (typeof base[key] !== "object" || base[key] === null)
                base[key] = {};
            base = base[key];
        }
        const visible = Boolean(shouldFlip ? !propValue : propValue);
        base[propertyChain.at(-1)] = visible;
    }
    // This can't be in hostLoad as childElem is only accessible after first render
    hostLoaded() {
        const { el } = this.component;
        const childNode = el.shadowRoot?.firstChild ?? el.firstChild ?? undefined;
        /*
         * On hot reloading, new this.component instance is created (so properties
         * are reset) but this.component.el instance is preserved (so properties are
         * preserved). Since childElem is re-parented on 1st hostLoad(),
         * for it to be accessible on the 2nd hostLoad() (hot reload), we have to
         * store it's reference on the el, rather than component
         */
        el.childElem = childNode ?? el.childElem;
        this.component.childElem = el.childElem;
        this._instance.container = this.component.childElem ?? this.component.el;
        if (el.childElem === undefined && "production" !== "production")
            {}
        // Define the "view" property if not already present for compatibility with JS API
        if (!("view" in this.component))
            Object.defineProperty(this.component, "view", {
                get: () => this._instance.view ?? this._instance.viewModel?.view,
                set: (view) => {
                    if (!("view" in this._instance) && typeof this._instance.viewModel === "object")
                        this._instance.viewModel.view = view;
                    else
                        this._instance.view = view;
                },
            });
        (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_4__.c)(this.component);
        this.component.arcgisReady.emit();
    }
    _watchMetaProperties() {
        this.watch("position", (position) => {
            if (this.component.childElem != null && typeof position === "string")
                this.component.view?.ui.move(this.component.childElem, position);
        });
        this.watch("referenceElement", (referenceElement) => void (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_4__.r)(this.component, referenceElement).catch(console.error));
    }
    _reEmitWidgetEvents() {
        const isEvented = "on" in this._instance && typeof this._instance.on === "function";
        if (!isEvented)
            return;
        const eventTarget = this._instance;
        Object.entries(this.component).forEach(([key, unknown]) => {
            const value = unknown;
            if (!key.startsWith("widget") ||
                key === "widget" ||
                typeof value !== "object" ||
                value === null ||
                !("emit" in value) ||
                typeof value.emit !== "function")
                return;
            const emit = value.emit;
            const trimmedEventName = key.slice("widget".length);
            const capitalizedEventName = (0,_index_7d72018f_js__WEBPACK_IMPORTED_MODULE_3__.k)(trimmedEventName);
            const eventName = `${capitalizedEventName[0].toLowerCase()}${capitalizedEventName.slice(1)}`;
            this.onLifecycle(() => this.reactiveUtils.on(() => eventTarget, eventName, emit));
        });
    }
    hostDisconnected() {
        if (typeof this.component.childElem === "object")
            this.component.view?.ui.remove(this.component.childElem);
    }
    _makeVisibleElementsBinder() {
        return new Proxy({}, {
            has: (target, prop) => typeof prop === "string" || Reflect.has(target, prop),
            get: (target, prop) => {
                // Possibly called by the JS engine
                if (typeof prop === "symbol" || prop in Promise.prototype)
                    return Reflect.get(target, prop);
                const propertyChain = [prop];
                const proxy = this._makeRecursiveProxy(propertyChain);
                return this.component.manager.trackPropKey((resolvedKey) => {
                    if (resolvedKey === undefined)
                        throw new Error("Unable to bind visibleElements property. Check for incorrect this.widget.visibleElements usage");
                    this.component[resolvedKey] = false;
                    this._watchedVisibleElementsProperties[resolvedKey] = propertyChain;
                }, proxy, true);
            },
        });
    }
    _makeRecursiveProxy(propertyChain) {
        const chain = new Proxy({}, {
            get: (target, prop) => {
                const value = Reflect.get(target, prop);
                // Possibly called by the JS engine
                if (typeof prop === "symbol" || prop in Promise.prototype)
                    return value;
                propertyChain.push(prop);
                return chain;
            },
        });
        return chain;
    }
}
const proxy = (0,_chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.p)(WidgetController);

const compassCss = "";

const isOrientationEqual = (a, b) => a.z === b.z && a.y === b.y && a.x === b.x;
const useCompassWidget = makeWidgetController(_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.k);
const ArcgisCompass = class {
    constructor(hostRef) {
        (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisReady = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisReady", 7);
        this.arcgisPropertyChange = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPropertyChange", 7);
        this.manager = (0,_chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.u)(this);
        this.reactiveUtils = (0,_chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.l)(_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.i);
        this.widget = useCompassWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = (0,_chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.b)()("orientation");
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.orientation = this.manager.getSet(
        // Assertion needed because JS API's type is "any"
        this.viewModel.orientation, {
            set: (newValue, oldValue) => (isOrientationEqual(newValue ?? {}, oldValue ?? {}) ? oldValue : newValue),
        });
        this.position = "bottom-left";
        this.referenceElement = undefined;
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async reset() {
        this.widget.reset();
    }
    get el() { return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};
ArcgisCompass.style = compassCss;




/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addHandles),
/* harmony export */   b: () => (/* binding */ isNotSameViewpoint),
/* harmony export */   c: () => (/* binding */ checkForView),
/* harmony export */   d: () => (/* binding */ checkForExpand),
/* harmony export */   e: () => (/* binding */ isNotSameCamera),
/* harmony export */   f: () => (/* binding */ isNotSameEnvironment),
/* harmony export */   g: () => (/* binding */ isValidInteger),
/* harmony export */   i: () => (/* binding */ isNullOrEmptyString),
/* harmony export */   r: () => (/* binding */ referenceElementHelper)
/* harmony export */ });
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
function checkForExpand(element) {
    const expandRef = element.el.closest("arcgis-expand") ?? element.expandElem;
    if (expandRef?.widget) {
        element.view = expandRef.view;
        expandRef.widget.content = element.childElem ?? element.el;
        // TODO: Update to be expandIcon = widget.icon, not ready yet in 4.27next
        if (!expandRef.expandIcon) {
            expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
        }
        return true;
    }
    if (expandRef) {
        const widgetHandler = () => {
            expandRef.removeEventListener("arcgisExpandReady", widgetHandler, false);
            element.view = expandRef.view;
            expandRef.widget.content = element.childElem ?? element.el;
            if (!expandRef.expandIcon) {
                expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
            }
        };
        expandRef.addEventListener("arcgisExpandReady", widgetHandler, false);
        return true;
    }
    return false;
}

//--------------------------------------------------------------------------
//
//  Public Methods
//
//--------------------------------------------------------------------------
function addHandles(element, handle) {
    if (Array.isArray(handle)) {
        element._watchHandles = [...element._watchHandles, ...handle];
    }
    else {
        element._watchHandles.push(handle);
    }
}
function checkForView(element) {
    let isUsingReferenceElement = false;
    if (!checkForExpand(element)) {
        let viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (!viewRef && typeof element.referenceElement === "string") {
            viewRef = document.querySelector(element.referenceElement);
            isUsingReferenceElement = true;
        }
        if (viewRef?.view) {
            element.view = viewRef.view;
            const el = element.childElem ?? element.el;
            if (!isUsingReferenceElement) {
                element.view.ui.add(el, element.position);
            }
        }
        else if (viewRef) {
            waitForViewHandler(viewRef, element, isUsingReferenceElement);
        }
    }
    else {
        const viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (viewRef?.view) {
            element.view = viewRef.view;
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                element.view = viewRef.view;
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    }
}
function isNullOrEmptyString(value) {
    return value === undefined || value === null || value === "";
}
function isValidInteger(value) {
    return value != null && value % 1 === 0;
}
function isNotSameCamera(camera, camera2) {
    return (camera2 === undefined ||
        camera.position !== camera2.position ||
        camera.heading !== camera2.heading ||
        camera.tilt !== camera2.tilt);
}
function isNotSameEnvironment(environment, environment2) {
    return (environment2 === undefined ||
        environment2.atmosphereEnabled !== environment.atmosphereEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.directShadowsEnabled !==
            environment.lighting.directShadowsEnabled ||
        environment2.lighting.cameraTrackingEnabled !==
            environment.lighting.cameraTrackingEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.displayUTCOffset !==
            environment.lighting.displayUTCOffset);
}
function isNotSameViewpoint(viewpoint, viewpoint2) {
    return (viewpoint2 === undefined ||
        viewpoint.targetGeometry !== viewpoint2.targetGeometry ||
        viewpoint.rotation !== viewpoint2.rotation ||
        viewpoint.scale !== viewpoint2.scale);
}
async function updateForView(viewStr) {
    const viewRef = document.querySelector(viewStr);
    return await new Promise((resolve) => {
        if (viewRef?.view !== undefined) {
            resolve(viewRef.view);
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                resolve(viewRef.view);
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    });
}
async function referenceElementHelper(element, refElement) {
    if (refElement === undefined)
        return;
    else if (typeof refElement === "string") {
        element.view = await updateForView(refElement);
    }
    else if (element.widget) {
        element.view = refElement.view;
    }
}
//--------------------------------------------------------------------------
//
//  Private Methods
//
//--------------------------------------------------------------------------
function waitForViewHandler(viewRef, element, isUsingRefernceElement) {
    const handler = () => {
        viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
        element.view = viewRef.view;
        if (!isUsingRefernceElement) {
            element.view.ui.add(element.childElem ?? element.el, element.position);
        }
    };
    viewRef.addEventListener("arcgisViewReadyChange", handler, false);
}




/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/esm/index-7d72018f.js":
/*!************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/index-7d72018f.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ classes),
/* harmony export */   k: () => (/* binding */ kebabToPascal)
/* harmony export */ });
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
// src/array-utils.ts

// src/css-utils.ts
function classes(...classes2) {
  const effectiveClasses = [];
  for (let i = 0; i < classes2.length; i++) {
    const arg = classes2[i];
    if (typeof arg === "string") {
      effectiveClasses.push(arg);
    } else if (Array.isArray(arg)) {
      effectiveClasses.push.apply(effectiveClasses, arg);
    } else if (typeof arg === "object") {
      for (const prop in arg) {
        if (arg[prop]) {
          effectiveClasses.push(prop);
        }
      }
    }
  }
  const className = effectiveClasses.join(" ");
  effectiveClasses.length = 0;
  return className;
}

// src/text.ts
var kebabToPascal = (name) => name.split("-").map((part) => (part[0]?.toLocaleUpperCase() ?? "") + part.slice(1)).join("");
var capitalize = (string) => string.charAt(0).toUpperCase() + string.slice(1);
var camelToHuman = (value) => capitalize(value.replaceAll(/([a-z])([A-Z])/gu, "$1 $2"));
new Proxy(
  {},
  {
    get: (_target, property) => camelToHuman(property.toString())
  }
);




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,