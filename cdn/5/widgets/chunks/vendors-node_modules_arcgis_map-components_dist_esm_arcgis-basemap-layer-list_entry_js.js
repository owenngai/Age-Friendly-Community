"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_arcgis_map-components_dist_esm_arcgis-basemap-layer-list_entry_js"],{

/***/ "./node_modules/@arcgis/map-components/dist/esm/arcgis-basemap-layer-list.entry.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/arcgis-basemap-layer-list.entry.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_basemap_layer_list: () => (/* binding */ ArcgisBasemapLayerList)
/* harmony export */ });
/* harmony import */ var _index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-6e172aac.js */ "./node_modules/@arcgis/map-components/dist/esm/index-6e172aac.js");
/* harmony import */ var _index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-0bc55ca5.js */ "./node_modules/@arcgis/map-components/dist/esm/index-0bc55ca5.js");
/* harmony import */ var _component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component-utils-23194f7c.js */ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js");
/* harmony import */ var _disconnected_6cf1c100_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./disconnected-6cf1c100.js */ "./node_modules/@arcgis/map-components/dist/esm/disconnected-6cf1c100.js");
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */





const basemapLayerListCss = "";

const ArcgisBasemapLayerList = class {
    constructor(hostRef) {
        (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisBasemapLayerListReady = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBasemapLayerListReady", 7);
        this.basemapLayerListTriggerAction = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "basemapLayerListTriggerAction", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.baseFilterText = "";
        this.baseItems = undefined;
        this.baseListItemCreatedFunction = undefined;
        this.basemapTitle = undefined;
        this.collapsed = false;
        this.dragEnabled = false;
        this.editingTitle = false;
        this.filterPlaceholder = "";
        this.icon = undefined;
        this.minFilterItems = 10;
        this.referenceFilterText = "";
        this.referenceListItemCreatedFunction = undefined;
        this.selectedItems = undefined;
        this.selectionMode = "none";
        this.visibilityAppearance = "default";
        this.visibleElementsBaseLayers = true;
        this.visibleElementsCloseButton = false;
        this.visibleElementsCollapseButton = false;
        this.visibleElementsEditTitleButton = false;
        this.visibleElementsErrors = false;
        this.visibleElementsFilter = false;
        this.visibleElementsFlow = true;
        this.visibleElementsHeading = true;
        this.visibleElementsReferenceLayers = true;
        this.visibleElementsStatusIndicators = true;
        this.visibleElementsTemporaryLayerIndicators = false;
        this.view = undefined;
        this.widget = undefined;
        this.position = "bottom-left";
    }
    referenceElementWatcher(value) {
        void (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.r)(this, value);
    }
    baseFilterTextWatcher(value) {
        if (this.widget) {
            this.widget.baseFilterText = value;
        }
    }
    baseListItemCreatedFunctionWatcher(value) {
        if (this.widget) {
            this.widget.baseListItemCreatedFunction = value;
        }
    }
    basemapTitleWatcher(value, old) {
        if (this.widget && value !== old) {
            this.widget.basemapTitle = value;
        }
    }
    collapsedWatcher(value) {
        if (this.widget && this.widget.collapsed !== value) {
            this.widget.collapsed = value;
        }
    }
    dragEnabledWatcher(value) {
        if (this.widget && value !== undefined) {
            this.widget.dragEnabled = value;
        }
    }
    editingTitleWatcher(value) {
        if (this.widget && value !== undefined) {
            this.widget.editingTitle = value;
        }
    }
    filterPlaceholderWatcher(value) {
        if (this.widget) {
            this.widget.filterPlaceholder = value;
        }
    }
    iconWatcher(value) {
        if (this.widget) {
            this.widget.icon = value;
        }
    }
    minFilterItemsWatcher(value) {
        if (this.widget) {
            this.widget.minFilterItems = value;
        }
    }
    referenceFilterTextWatcher(value) {
        if (this.widget) {
            this.widget.referenceFilterText = value;
        }
    }
    referenceListItemCreatedFunctionWatcher(value) {
        if (this.widget) {
            this.widget.referenceListItemCreatedFunction = value;
        }
    }
    selectionModeWatcher(value) {
        if (this.widget) {
            this.widget.selectionMode = value;
        }
    }
    visibilityAppearanceWatcher(value) {
        if (this.widget) {
            this.widget.visibilityAppearance = value;
        }
    }
    visibleElementsBaseLayersWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                baseLayers: value,
            };
        }
    }
    visibleElementsCloseButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                closeButton: value,
            };
        }
    }
    visibleElementsCollapseButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                collapseButton: value,
            };
        }
    }
    visibleElementsEditTitleButtonWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                editTitleButton: value,
            };
        }
    }
    visibleElementsErrorsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                errors: value,
            };
        }
    }
    visibleElementsFilterWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                filter: value,
            };
        }
    }
    visibleElementsFlowWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                flow: value,
            };
        }
    }
    visibleElementsHeadingWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                filter: value,
            };
        }
    }
    visibleElementsReferenceLayersWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                referenceLayers: value,
            };
        }
    }
    visibleElementsStatusIndicatorsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                statusIndicators: value,
            };
        }
    }
    visibleElementsTemporaryLayerIndicatorsWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                temporaryLayerIndicators: value,
            };
        }
    }
    viewWatcher(value) {
        if (this.widget) {
            this.widget.view = value;
        }
    }
    positionWatcher(value) {
        if (this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.f)(params);
        this.widget = widget;
        await this._addWatchers();
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        this.arcgisBasemapLayerListReady.emit();
        (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.c)(this);
    }
    disconnectedCallback() {
        (0,_disconnected_6cf1c100_js__WEBPACK_IMPORTED_MODULE_3__.o)(this);
    }
    render() {
        return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            baseLayers: this.visibleElementsBaseLayers,
            closeButton: this.visibleElementsCloseButton,
            collapseButton: this.visibleElementsCollapseButton,
            editTitleButton: this.visibleElementsEditTitleButton,
            errors: this.visibleElementsErrors,
            filter: this.visibleElementsFilter,
            flow: this.visibleElementsFlow,
            heading: this.visibleElementsHeading,
            referenceLayers: this.visibleElementsReferenceLayers,
            statusIndicators: this.visibleElementsStatusIndicators,
            temporaryLayerIndicators: this.visibleElementsTemporaryLayerIndicators,
        };
        if (this.baseFilterText) {
            params.baseFilterText = this.baseFilterText;
        }
        if (this.baseListItemCreatedFunction) {
            params.baseListItemCreatedFunction = this.baseListItemCreatedFunction;
        }
        if (this.basemapTitle) {
            params.basemapTitle = this.basemapTitle;
        }
        if (this.collapsed !== undefined) {
            params.collapsed = this.collapsed;
        }
        if (this.dragEnabled !== undefined) {
            params.dragEnabled = this.dragEnabled;
        }
        if (this.editingTitle !== undefined) {
            params.editingTitle = this.editingTitle;
        }
        if (this.filterPlaceholder) {
            params.filterPlaceholder = this.filterPlaceholder;
        }
        if (this.icon) {
            params.icon = this.icon;
        }
        if (this.minFilterItems !== undefined) {
            params.minFilterItems = this.minFilterItems;
        }
        if (this.referenceFilterText) {
            params.referenceFilterText = this.referenceFilterText;
        }
        if (this.referenceListItemCreatedFunction) {
            params.referenceListItemCreatedFunction = this.referenceListItemCreatedFunction;
        }
        if (this.selectionMode) {
            params.selectionMode = this.selectionMode;
        }
        if (this.visibilityAppearance) {
            params.visibilityAppearance = this.visibilityAppearance;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    async _addWatchers() {
        const { watch } = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.i)();
        (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.a)(this, [
            watch(() => this.widget.baseItems, (value) => (this.baseItems = value), {
                initial: true,
            }),
            watch(() => this.widget.selectedItems, (value) => (this.selectedItems = value), {
                initial: true,
            }),
            watch(() => this.widget.basemapTitle, (value) => {
                if (!this.basemapTitle) {
                    this.basemapTitle = value;
                }
            }, {
                initial: true,
            }),
            watch(() => this.widget.collapsed, (value) => (this.collapsed = value)),
        ]);
    }
    _proxyEvents() {
        this.widget?.on("trigger-action", (e) => this.basemapLayerListTriggerAction.emit(e));
    }
    get el() { return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "baseFilterText": ["baseFilterTextWatcher"],
        "baseListItemCreatedFunction": ["baseListItemCreatedFunctionWatcher"],
        "basemapTitle": ["basemapTitleWatcher"],
        "collapsed": ["collapsedWatcher"],
        "dragEnabled": ["dragEnabledWatcher"],
        "editingTitle": ["editingTitleWatcher"],
        "filterPlaceholder": ["filterPlaceholderWatcher"],
        "icon": ["iconWatcher"],
        "minFilterItems": ["minFilterItemsWatcher"],
        "referenceFilterText": ["referenceFilterTextWatcher"],
        "referenceListItemCreatedFunction": ["referenceListItemCreatedFunctionWatcher"],
        "selectionMode": ["selectionModeWatcher"],
        "visibilityAppearance": ["visibilityAppearanceWatcher"],
        "visibleElementsBaseLayers": ["visibleElementsBaseLayersWatcher"],
        "visibleElementsCloseButton": ["visibleElementsCloseButtonWatcher"],
        "visibleElementsCollapseButton": ["visibleElementsCollapseButtonWatcher"],
        "visibleElementsEditTitleButton": ["visibleElementsEditTitleButtonWatcher"],
        "visibleElementsErrors": ["visibleElementsErrorsWatcher"],
        "visibleElementsFilter": ["visibleElementsFilterWatcher"],
        "visibleElementsFlow": ["visibleElementsFlowWatcher"],
        "visibleElementsHeading": ["visibleElementsHeadingWatcher"],
        "visibleElementsReferenceLayers": ["visibleElementsReferenceLayersWatcher"],
        "visibleElementsStatusIndicators": ["visibleElementsStatusIndicatorsWatcher"],
        "visibleElementsTemporaryLayerIndicators": ["visibleElementsTemporaryLayerIndicatorsWatcher"],
        "view": ["viewWatcher"],
        "position": ["positionWatcher"]
    }; }
};
ArcgisBasemapLayerList.style = basemapLayerListCss;




/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addHandles),
/* harmony export */   b: () => (/* binding */ isNotSameViewpoint),
/* harmony export */   c: () => (/* binding */ checkForView),
/* harmony export */   d: () => (/* binding */ checkForExpand),
/* harmony export */   e: () => (/* binding */ isNotSameCamera),
/* harmony export */   f: () => (/* binding */ isNotSameEnvironment),
/* harmony export */   g: () => (/* binding */ isValidInteger),
/* harmony export */   i: () => (/* binding */ isNullOrEmptyString),
/* harmony export */   r: () => (/* binding */ referenceElementHelper)
/* harmony export */ });
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
function checkForExpand(element) {
    const expandRef = element.el.closest("arcgis-expand") ?? element.expandElem;
    if (expandRef?.widget) {
        element.view = expandRef.view;
        expandRef.widget.content = element.childElem ?? element.el;
        // TODO: Update to be expandIcon = widget.icon, not ready yet in 4.27next
        if (!expandRef.expandIcon) {
            expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
        }
        return true;
    }
    if (expandRef) {
        const widgetHandler = () => {
            expandRef.removeEventListener("arcgisExpandReady", widgetHandler, false);
            element.view = expandRef.view;
            expandRef.widget.content = element.childElem ?? element.el;
            if (!expandRef.expandIcon) {
                expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
            }
        };
        expandRef.addEventListener("arcgisExpandReady", widgetHandler, false);
        return true;
    }
    return false;
}

//--------------------------------------------------------------------------
//
//  Public Methods
//
//--------------------------------------------------------------------------
function addHandles(element, handle) {
    if (Array.isArray(handle)) {
        element._watchHandles = [...element._watchHandles, ...handle];
    }
    else {
        element._watchHandles.push(handle);
    }
}
function checkForView(element) {
    let isUsingReferenceElement = false;
    if (!checkForExpand(element)) {
        let viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (!viewRef && typeof element.referenceElement === "string") {
            viewRef = document.querySelector(element.referenceElement);
            isUsingReferenceElement = true;
        }
        if (viewRef?.view) {
            element.view = viewRef.view;
            const el = element.childElem ?? element.el;
            if (!isUsingReferenceElement) {
                element.view.ui.add(el, element.position);
            }
        }
        else if (viewRef) {
            waitForViewHandler(viewRef, element, isUsingReferenceElement);
        }
    }
    else {
        const viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (viewRef?.view) {
            element.view = viewRef.view;
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                element.view = viewRef.view;
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    }
}
function isNullOrEmptyString(value) {
    return value === undefined || value === null || value === "";
}
function isValidInteger(value) {
    return value != null && value % 1 === 0;
}
function isNotSameCamera(camera, camera2) {
    return (camera2 === undefined ||
        camera.position !== camera2.position ||
        camera.heading !== camera2.heading ||
        camera.tilt !== camera2.tilt);
}
function isNotSameEnvironment(environment, environment2) {
    return (environment2 === undefined ||
        environment2.atmosphereEnabled !== environment.atmosphereEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.directShadowsEnabled !==
            environment.lighting.directShadowsEnabled ||
        environment2.lighting.cameraTrackingEnabled !==
            environment.lighting.cameraTrackingEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.displayUTCOffset !==
            environment.lighting.displayUTCOffset);
}
function isNotSameViewpoint(viewpoint, viewpoint2) {
    return (viewpoint2 === undefined ||
        viewpoint.targetGeometry !== viewpoint2.targetGeometry ||
        viewpoint.rotation !== viewpoint2.rotation ||
        viewpoint.scale !== viewpoint2.scale);
}
async function updateForView(viewStr) {
    const viewRef = document.querySelector(viewStr);
    return await new Promise((resolve) => {
        if (viewRef?.view !== undefined) {
            resolve(viewRef.view);
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                resolve(viewRef.view);
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    });
}
async function referenceElementHelper(element, refElement) {
    if (refElement === undefined)
        return;
    else if (typeof refElement === "string") {
        element.view = await updateForView(refElement);
    }
    else if (element.widget) {
        element.view = refElement.view;
    }
}
//--------------------------------------------------------------------------
//
//  Private Methods
//
//--------------------------------------------------------------------------
function waitForViewHandler(viewRef, element, isUsingRefernceElement) {
    const handler = () => {
        viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
        element.view = viewRef.view;
        if (!isUsingRefernceElement) {
            element.view.ui.add(element.childElem ?? element.el, element.position);
        }
    };
    viewRef.addEventListener("arcgisViewReadyChange", handler, false);
}




/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/esm/disconnected-6cf1c100.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/disconnected-6cf1c100.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: () => (/* binding */ onDisconnectedHelper)
/* harmony export */ });
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
function onDisconnectedHelper(element) {
    if (element.childElem) {
        if (!element.el.isConnected) {
            if (element.view) {
                element.view.ui.remove(element.childElem);
            }
            else if (element.widget?.view) {
                element.widget.view.ui.remove(element.childElem);
            }
            if (element._watchHandles) {
                element._watchHandles.forEach((handle) => {
                    handle.remove();
                });
            }
            element._watchHandles = [];
            element.widget?.destroy();
        }
    }
    else {
        setTimeout(() => {
            if (!element.el.isConnected) {
                if (element.view) {
                    element.view.ui.remove(element.el);
                }
                else if (element.widget?.view) {
                    element.widget.view.ui.remove(element.el);
                }
                if (element._watchHandles) {
                    element._watchHandles.forEach((handle) => {
                        handle.remove();
                    });
                }
                element._watchHandles = [];
                element.widget?.destroy();
            }
        }, 1000);
    }
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,