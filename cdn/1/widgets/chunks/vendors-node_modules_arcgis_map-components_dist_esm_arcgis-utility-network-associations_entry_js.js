"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_arcgis_map-components_dist_esm_arcgis-utility-network-associations_entry_js"],{

/***/ "./node_modules/@arcgis/map-components/dist/esm/arcgis-utility-network-associations.entry.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/arcgis-utility-network-associations.entry.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_utility_network_associations: () => (/* binding */ ArcgisUtilityNetworkAssociations)
/* harmony export */ });
/* harmony import */ var _index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-6e172aac.js */ "./node_modules/@arcgis/map-components/dist/esm/index-6e172aac.js");
/* harmony import */ var _index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-0bc55ca5.js */ "./node_modules/@arcgis/map-components/dist/esm/index-0bc55ca5.js");
/* harmony import */ var _component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component-utils-23194f7c.js */ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js");
/* harmony import */ var _disconnected_6cf1c100_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./disconnected-6cf1c100.js */ "./node_modules/@arcgis/map-components/dist/esm/disconnected-6cf1c100.js");
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */





const utilityNetworkAssociationsCss = "arcgis-utility-network-associations{}";

const ArcgisUtilityNetworkAssociations = class {
    constructor(hostRef) {
        (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisUtilityNetworkAssociationsReady = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisUtilityNetworkAssociationsReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.autoRefreshAssociations = true;
        this.connectivityAssociationsLineSymbol = undefined;
        this.includeConnectivityAssociations = true;
        this.includeStructuralAttachmentAssociations = true;
        this.maxAllowableAssociations = 250;
        this.maxAllowableAssociationsSliderMax = undefined;
        this.maxAllowableAssociationsSliderMin = undefined;
        this.maxAllowableAssociationsSliderStep = undefined;
        this.showArrowsConnectivity = false;
        this.showArrowsStructuralAttachment = false;
        this.showAssociationsEnabled = false;
        this.structuralAttachmentAssociationsLineSymbol = undefined;
        this.utilityNetwork = undefined;
        this.visibleElementsConnectivityAssociationsSettingsArrowsToggle = true;
        this.visibleElementsConnectivityAssociationsSettingsCapSelect = true;
        this.visibleElementsConnectivityAssociationsSettingsColorPicker = true;
        this.visibleElementsConnectivityAssociationsSettingsStylePicker = true;
        this.visibleElementsConnectivityAssociationsSettingsWidthInput = true;
        this.visibleElementsMaxAllowableAssociationsSlider = true;
        this.visibleElementsStructuralAttachmentAssociationsSettingsArrowsToggle = true;
        this.visibleElementsStructuralAttachmentAssociationsSettingsCapSelect = true;
        this.visibleElementsStructuralAttachmentAssociationsSettingsStylePicker = true;
        this.visibleElementsStructuralAttachmentAssociationsSettingsWidthInput = true;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.r)(this, value);
    }
    autoRefreshAssociationsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.autoRefreshAssociations = value;
        }
    }
    connectivityAssociationsLineSymbolWatcher(value) {
        if (this.widget) {
            this.widget.connectivityAssociationsLineSymbol = value;
        }
    }
    includeConnectivityAssociationsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.includeConnectivityAssociations = value;
        }
    }
    includeStructuralAttachmentAssociationsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.includeStructuralAttachmentAssociations = value;
        }
    }
    maxAllowableAssociationsWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.maxAllowableAssociations = value;
        }
    }
    maxAllowableAssociationsSliderMaxWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.maxAllowableAssociationsSliderMax = value;
        }
    }
    maxAllowableAssociationsSliderMinWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.maxAllowableAssociationsSliderMin = value;
        }
    }
    maxAllowableAssociationsSliderStepWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.maxAllowableAssociationsSliderStep = value;
        }
    }
    showArrowsConnectivityWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.showArrowsConnectivity = value;
        }
    }
    showArrowsStructuralAttachmentWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.showArrowsStructuralAttachment = value;
        }
    }
    showAssociationsEnabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.showAssociationsEnabled = value;
        }
    }
    structuralAttachmentAssociationsLineSymbolWatcher(value) {
        if (this.widget) {
            this.widget.structuralAttachmentAssociationsLineSymbol = value;
        }
    }
    utilityNetworkWatcher(value) {
        if (this.widget) {
            this.widget.utilityNetwork = value;
        }
    }
    visibleElementsConnectivityAssociationsSettingsArrowsToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                connectivityAssociationsSettings: {
                    ...this.widget.visibleElements.connectivityAssociationsSettings,
                    arrowsToggle: value,
                },
            };
        }
    }
    visibleElementsConnectivityAssociationsSettingsCapSelectWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                connectivityAssociationsSettings: {
                    ...this.widget.visibleElements.connectivityAssociationsSettings,
                    capSelect: value,
                },
            };
        }
    }
    visibleElementsConnectivityAssociationsSettingsColorPickerWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                connectivityAssociationsSettings: {
                    ...this.widget.visibleElements.connectivityAssociationsSettings,
                    colorPicker: value,
                },
            };
        }
    }
    visibleElementsConnectivityAssociationsSettingsStylePickerWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                connectivityAssociationsSettings: {
                    ...this.widget.visibleElements.connectivityAssociationsSettings,
                    stylePicker: value,
                },
            };
        }
    }
    visibleElementsConnectivityAssociationsSettingsWidthInputWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                connectivityAssociationsSettings: {
                    ...this.widget.visibleElements.connectivityAssociationsSettings,
                    widthInput: value,
                },
            };
        }
    }
    visibleElementsMaxAllowableAssociationsSliderWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                maxAllowableAssociationsSlider: value,
            };
        }
    }
    visibleElementsStructuralAttachmentAssociationsSettingsArrowsToggleWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                structuralAttachmentAssociationsSettings: {
                    ...this.widget.visibleElements.structuralAttachmentAssociationsSettings,
                    arrowsToggle: value,
                },
            };
        }
    }
    visibleElementsStructuralAttachmentAssociationsSettingsCapSelectWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                structuralAttachmentAssociationsSettings: {
                    ...this.widget.visibleElements.structuralAttachmentAssociationsSettings,
                    capSelect: value,
                },
            };
        }
    }
    visibleElementsStructuralAttachmentAssociationsSettingsStylePickerWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                structuralAttachmentAssociationsSettings: {
                    ...this.widget.visibleElements.structuralAttachmentAssociationsSettings,
                    stylePicker: value,
                },
            };
        }
    }
    visibleElementsStructuralAttachmentAssociationsSettingsWidthInputWatcher(value) {
        if (this.widget) {
            this.widget.visibleElements = {
                ...this.widget.visibleElements,
                structuralAttachmentAssociationsSettings: {
                    ...this.widget.visibleElements.structuralAttachmentAssociationsSettings,
                    widthInput: value,
                },
            };
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget) {
            this.view.ui.move(this.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
            void this._loadUtilityNetwork();
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.a1)(params);
        this.widget = widget;
        this._addContainer();
        this.arcgisUtilityNetworkAssociationsReady.emit();
        (0,_component_utils_23194f7c_js__WEBPACK_IMPORTED_MODULE_2__.c)(this);
    }
    disconnectedCallback() {
        (0,_disconnected_6cf1c100_js__WEBPACK_IMPORTED_MODULE_3__.o)(this);
    }
    render() {
        return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.childElem;
    }
    _createParams() {
        const params = {};
        params.visibleElements = {
            connectivityAssociationsSettings: {
                arrowsToggle: this.visibleElementsConnectivityAssociationsSettingsArrowsToggle,
                capSelect: this.visibleElementsConnectivityAssociationsSettingsCapSelect,
                colorPicker: this.visibleElementsConnectivityAssociationsSettingsColorPicker,
                stylePicker: this.visibleElementsConnectivityAssociationsSettingsStylePicker,
                widthInput: this.visibleElementsConnectivityAssociationsSettingsWidthInput,
            },
            maxAllowableAssociationsSlider: this.visibleElementsMaxAllowableAssociationsSlider,
            structuralAttachmentAssociationsSettings: {
                arrowsToggle: this.visibleElementsStructuralAttachmentAssociationsSettingsArrowsToggle,
                capSelect: this.visibleElementsStructuralAttachmentAssociationsSettingsCapSelect,
                stylePicker: this.visibleElementsStructuralAttachmentAssociationsSettingsStylePicker,
                widthInput: this.visibleElementsStructuralAttachmentAssociationsSettingsWidthInput,
            },
        };
        if (this.autoRefreshAssociations !== undefined) {
            params.autoRefreshAssociations = this.autoRefreshAssociations;
        }
        if (this.connectivityAssociationsLineSymbol !== undefined) {
            params.connectivityAssociationsLineSymbol = this.connectivityAssociationsLineSymbol;
        }
        if (this.includeConnectivityAssociations !== undefined) {
            params.includeConnectivityAssociations = this.includeConnectivityAssociations;
        }
        if (this.includeStructuralAttachmentAssociations !== undefined) {
            params.includeStructuralAttachmentAssociations = this.includeStructuralAttachmentAssociations;
        }
        if (this.maxAllowableAssociations !== undefined) {
            params.maxAllowableAssociations = this.maxAllowableAssociations;
        }
        if (this.maxAllowableAssociationsSliderMax !== undefined) {
            params.maxAllowableAssociationsSliderMax = this.maxAllowableAssociationsSliderMax;
        }
        if (this.maxAllowableAssociationsSliderMin !== undefined) {
            params.maxAllowableAssociationsSliderMin = this.maxAllowableAssociationsSliderMin;
        }
        if (this.maxAllowableAssociationsSliderStep !== undefined) {
            params.maxAllowableAssociationsSliderStep = this.maxAllowableAssociationsSliderStep;
        }
        if (this.showArrowsConnectivity !== undefined) {
            params.showArrowsConnectivity = this.showArrowsConnectivity;
        }
        if (this.showArrowsStructuralAttachment !== undefined) {
            params.showArrowsStructuralAttachment = this.showArrowsStructuralAttachment;
        }
        if (this.showAssociationsEnabled !== undefined) {
            params.showAssociationsEnabled = this.showAssociationsEnabled;
        }
        if (this.structuralAttachmentAssociationsLineSymbol !== undefined) {
            params.structuralAttachmentAssociationsLineSymbol = this.structuralAttachmentAssociationsLineSymbol;
        }
        if (this.utilityNetwork !== undefined) {
            params.utilityNetwork = this.utilityNetwork;
        }
        return params;
    }
    async _loadUtilityNetwork() {
        if (this.view?.map && this.view.map.portalItem) {
            await this.view.map.load();
            const utilityNetwork = this.view.map.utilityNetworks.getItemAt(0);
            await utilityNetwork.load();
            this.utilityNetwork = utilityNetwork;
        }
    }
    get el() { return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "autoRefreshAssociations": ["autoRefreshAssociationsWatcher"],
        "connectivityAssociationsLineSymbol": ["connectivityAssociationsLineSymbolWatcher"],
        "includeConnectivityAssociations": ["includeConnectivityAssociationsWatcher"],
        "includeStructuralAttachmentAssociations": ["includeStructuralAttachmentAssociationsWatcher"],
        "maxAllowableAssociations": ["maxAllowableAssociationsWatcher"],
        "maxAllowableAssociationsSliderMax": ["maxAllowableAssociationsSliderMaxWatcher"],
        "maxAllowableAssociationsSliderMin": ["maxAllowableAssociationsSliderMinWatcher"],
        "maxAllowableAssociationsSliderStep": ["maxAllowableAssociationsSliderStepWatcher"],
        "showArrowsConnectivity": ["showArrowsConnectivityWatcher"],
        "showArrowsStructuralAttachment": ["showArrowsStructuralAttachmentWatcher"],
        "showAssociationsEnabled": ["showAssociationsEnabledWatcher"],
        "structuralAttachmentAssociationsLineSymbol": ["structuralAttachmentAssociationsLineSymbolWatcher"],
        "utilityNetwork": ["utilityNetworkWatcher"],
        "visibleElementsConnectivityAssociationsSettingsArrowsToggle": ["visibleElementsConnectivityAssociationsSettingsArrowsToggleWatcher"],
        "visibleElementsConnectivityAssociationsSettingsCapSelect": ["visibleElementsConnectivityAssociationsSettingsCapSelectWatcher"],
        "visibleElementsConnectivityAssociationsSettingsColorPicker": ["visibleElementsConnectivityAssociationsSettingsColorPickerWatcher"],
        "visibleElementsConnectivityAssociationsSettingsStylePicker": ["visibleElementsConnectivityAssociationsSettingsStylePickerWatcher"],
        "visibleElementsConnectivityAssociationsSettingsWidthInput": ["visibleElementsConnectivityAssociationsSettingsWidthInputWatcher"],
        "visibleElementsMaxAllowableAssociationsSlider": ["visibleElementsMaxAllowableAssociationsSliderWatcher"],
        "visibleElementsStructuralAttachmentAssociationsSettingsArrowsToggle": ["visibleElementsStructuralAttachmentAssociationsSettingsArrowsToggleWatcher"],
        "visibleElementsStructuralAttachmentAssociationsSettingsCapSelect": ["visibleElementsStructuralAttachmentAssociationsSettingsCapSelectWatcher"],
        "visibleElementsStructuralAttachmentAssociationsSettingsStylePicker": ["visibleElementsStructuralAttachmentAssociationsSettingsStylePickerWatcher"],
        "visibleElementsStructuralAttachmentAssociationsSettingsWidthInput": ["visibleElementsStructuralAttachmentAssociationsSettingsWidthInputWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisUtilityNetworkAssociations.style = utilityNetworkAssociationsCss;




/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/component-utils-23194f7c.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addHandles),
/* harmony export */   b: () => (/* binding */ isNotSameViewpoint),
/* harmony export */   c: () => (/* binding */ checkForView),
/* harmony export */   d: () => (/* binding */ checkForExpand),
/* harmony export */   e: () => (/* binding */ isNotSameCamera),
/* harmony export */   f: () => (/* binding */ isNotSameEnvironment),
/* harmony export */   g: () => (/* binding */ isValidInteger),
/* harmony export */   i: () => (/* binding */ isNullOrEmptyString),
/* harmony export */   r: () => (/* binding */ referenceElementHelper)
/* harmony export */ });
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
function checkForExpand(element) {
    const expandRef = element.el.closest("arcgis-expand") ?? element.expandElem;
    if (expandRef?.widget) {
        element.view = expandRef.view;
        expandRef.widget.content = element.childElem ?? element.el;
        // TODO: Update to be expandIcon = widget.icon, not ready yet in 4.27next
        if (!expandRef.expandIcon) {
            expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
        }
        return true;
    }
    if (expandRef) {
        const widgetHandler = () => {
            expandRef.removeEventListener("arcgisExpandReady", widgetHandler, false);
            element.view = expandRef.view;
            expandRef.widget.content = element.childElem ?? element.el;
            if (!expandRef.expandIcon) {
                expandRef.widget.expandIcon = element.widget ? element.widget.icon : element?.icon;
            }
        };
        expandRef.addEventListener("arcgisExpandReady", widgetHandler, false);
        return true;
    }
    return false;
}

//--------------------------------------------------------------------------
//
//  Public Methods
//
//--------------------------------------------------------------------------
function addHandles(element, handle) {
    if (Array.isArray(handle)) {
        element._watchHandles = [...element._watchHandles, ...handle];
    }
    else {
        element._watchHandles.push(handle);
    }
}
function checkForView(element) {
    let isUsingReferenceElement = false;
    if (!checkForExpand(element)) {
        let viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (!viewRef && typeof element.referenceElement === "string") {
            viewRef = document.querySelector(element.referenceElement);
            isUsingReferenceElement = true;
        }
        if (viewRef?.view) {
            element.view = viewRef.view;
            const el = element.childElem ?? element.el;
            if (!isUsingReferenceElement) {
                element.view.ui.add(el, element.position);
            }
        }
        else if (viewRef) {
            waitForViewHandler(viewRef, element, isUsingReferenceElement);
        }
    }
    else {
        const viewRef = element.el.closest("arcgis-map") ?? element.el.closest("arcgis-scene");
        if (viewRef?.view) {
            element.view = viewRef.view;
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                element.view = viewRef.view;
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    }
}
function isNullOrEmptyString(value) {
    return value === undefined || value === null || value === "";
}
function isValidInteger(value) {
    return value != null && value % 1 === 0;
}
function isNotSameCamera(camera, camera2) {
    return (camera2 === undefined ||
        camera.position !== camera2.position ||
        camera.heading !== camera2.heading ||
        camera.tilt !== camera2.tilt);
}
function isNotSameEnvironment(environment, environment2) {
    return (environment2 === undefined ||
        environment2.atmosphereEnabled !== environment.atmosphereEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.directShadowsEnabled !==
            environment.lighting.directShadowsEnabled ||
        environment2.lighting.cameraTrackingEnabled !==
            environment.lighting.cameraTrackingEnabled ||
        environment2.lighting.date !== environment.lighting.date ||
        environment2.lighting.displayUTCOffset !==
            environment.lighting.displayUTCOffset);
}
function isNotSameViewpoint(viewpoint, viewpoint2) {
    return (viewpoint2 === undefined ||
        viewpoint.targetGeometry !== viewpoint2.targetGeometry ||
        viewpoint.rotation !== viewpoint2.rotation ||
        viewpoint.scale !== viewpoint2.scale);
}
async function updateForView(viewStr) {
    const viewRef = document.querySelector(viewStr);
    return await new Promise((resolve) => {
        if (viewRef?.view !== undefined) {
            resolve(viewRef.view);
        }
        else if (viewRef) {
            const handler = () => {
                viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
                resolve(viewRef.view);
            };
            viewRef.addEventListener("arcgisViewReadyChange", handler, false);
        }
    });
}
async function referenceElementHelper(element, refElement) {
    if (refElement === undefined)
        return;
    else if (typeof refElement === "string") {
        element.view = await updateForView(refElement);
    }
    else if (element.widget) {
        element.view = refElement.view;
    }
}
//--------------------------------------------------------------------------
//
//  Private Methods
//
//--------------------------------------------------------------------------
function waitForViewHandler(viewRef, element, isUsingRefernceElement) {
    const handler = () => {
        viewRef.removeEventListener("arcgisViewReadyChange", handler, false);
        element.view = viewRef.view;
        if (!isUsingRefernceElement) {
            element.view.ui.add(element.childElem ?? element.el, element.position);
        }
    };
    viewRef.addEventListener("arcgisViewReadyChange", handler, false);
}




/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/esm/disconnected-6cf1c100.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/disconnected-6cf1c100.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: () => (/* binding */ onDisconnectedHelper)
/* harmony export */ });
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
function onDisconnectedHelper(element) {
    if (element.childElem) {
        if (!element.el.isConnected) {
            if (element.view) {
                element.view.ui.remove(element.childElem);
            }
            else if (element.widget?.view) {
                element.widget.view.ui.remove(element.childElem);
            }
            if (element._watchHandles) {
                element._watchHandles.forEach((handle) => {
                    handle.remove();
                });
            }
            element._watchHandles = [];
            element.widget?.destroy();
        }
    }
    else {
        setTimeout(() => {
            if (!element.el.isConnected) {
                if (element.view) {
                    element.view.ui.remove(element.el);
                }
                else if (element.widget?.view) {
                    element.widget.view.ui.remove(element.el);
                }
                if (element._watchHandles) {
                    element._watchHandles.forEach((handle) => {
                        handle.remove();
                    });
                }
                element._watchHandles = [];
                element.widget?.destroy();
            }
        }, 1000);
    }
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,