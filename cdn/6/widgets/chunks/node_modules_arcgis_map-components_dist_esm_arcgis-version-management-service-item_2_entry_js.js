"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["node_modules_arcgis_map-components_dist_esm_arcgis-version-management-service-item_2_entry_js"],{

/***/ "./node_modules/@arcgis/map-components/dist/esm/arcgis-version-management-service-item_2.entry.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/arcgis-version-management-service-item_2.entry.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_version_management_service_item: () => (/* binding */ ArcgisVersionManagementServiceItem),
/* harmony export */   arcgis_version_management_version_properties: () => (/* binding */ ArcgisVersionManagementVersionProperties)
/* harmony export */ });
/* harmony import */ var _index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-6e172aac.js */ "./node_modules/@arcgis/map-components/dist/esm/index-6e172aac.js");
/* harmony import */ var _index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-0bc55ca5.js */ "./node_modules/@arcgis/map-components/dist/esm/index-0bc55ca5.js");
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */



const ArcgisVersionManagementServiceItem = class {
    constructor(hostRef) {
        (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.versionItemActionClickedEventWithServiceUrl = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "versionItemActionClickedEventWithServiceUrl", 7);
        this.versionListActionClickedEvent = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "versionListActionClickedEvent", 7);
        this._versionListEventListeners = new Map();
        this._watchHandles = [];
        this._versionItemActionClickedEventWithServiceUrl = (e) => {
            this.versionItemActionClickedEventWithServiceUrl.emit(e.detail);
        };
        this._versionListActionClickedEvent = (e) => {
            this.versionListActionClickedEvent.emit(e.detail);
        };
        this.flowElement = undefined;
        this.heading = undefined;
        this.serviceUrl = undefined;
        this.strings = undefined;
        this.viewModel = undefined;
        this.state = undefined;
    }
    async componentDidLoad() {
        const { watch } = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.i)();
        this._watchHandles.push(watch(() => this.viewModel.state, (state) => {
            this.state = state;
        }));
    }
    async componentWillLoad() {
        this.state = this.viewModel.state;
    }
    disconnectedCallback() {
        this._watchHandles.forEach((handle) => {
            handle.remove();
        });
        this._watchHandles = [];
        this._removeVersionListEventListeners(this._versionList);
    }
    render() {
        const { flowElement, heading, serviceUrl, strings, viewModel } = this;
        let { _versionList } = this;
        const serviceName = viewModel.serviceNameLookup.get(serviceUrl);
        return ((0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: serviceName }, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: `actionManageVersions_${serviceName}`, icon: "list", scale: "s", slot: "header-actions-end", text: "", onClick: async () => {
                await viewModel.getVersionInfos(serviceUrl, false);
                _versionList = document.createElement("arcgis-version-management-version-list");
                _versionList.addEventListener("calciteFlowItemBack", async () => {
                    _versionList.remove();
                });
                _versionList.heading = heading;
                _versionList.serviceUrl = serviceUrl;
                _versionList.serviceName = serviceName;
                _versionList.strings = strings;
                _versionList.userHasAdvancedEditingUserTypeExtension =
                    viewModel.advancedEditingUserTypeExtensionLookup.get(serviceUrl);
                _versionList.versionInfos = viewModel.versionInfoLookup.get(serviceUrl);
                _versionList.viewModel = viewModel;
                this._addVersionListEventListeners(_versionList);
                flowElement.append(_versionList);
            } }), (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { "overlay-positioning": "fixed", referenceElement: `actionManageVersions_${serviceName}` }, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, strings.headers.manageVersions)))));
    }
    _addVersionListEventListeners(versionList) {
        versionList.addEventListener("versionItemActionClickedEventWithServiceUrl", this._versionItemActionClickedEventWithServiceUrl);
        this._versionListEventListeners.set("versionItemActionClickedEventWithServiceUrl", this._versionItemActionClickedEventWithServiceUrl);
        versionList.addEventListener("versionListActionClickedEvent", this._versionListActionClickedEvent);
        this._versionListEventListeners.set("versionListActionClickedEvent", this._versionListActionClickedEvent);
    }
    _removeVersionListEventListeners(versionList) {
        for (const [type, listener] of this._versionListEventListeners) {
            versionList.removeEventListener(type, listener);
        }
    }
    get _hostElement() { return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};

const ArcgisVersionManagementVersionProperties = class {
    constructor(hostRef) {
        (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.versionPropertiesSaveClickedEvent = (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "versionPropertiesSaveClickedEvent", 7);
        this._watchHandles = [];
        this.flowElement = undefined;
        this.serviceUrl = undefined;
        this.strings = undefined;
        this.versionInfo = undefined;
        this.viewModel = undefined;
        this.executionError = undefined;
        this.state = undefined;
    }
    async componentDidLoad() {
        await this.viewModel.getVersionInfos(this.serviceUrl, false);
    }
    async componentWillLoad() {
        const { watch } = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.i)();
        this._watchHandles.push(watch(() => this.viewModel.state, (state) => {
            this.state = state;
        }));
    }
    disconnectedCallback() {
        this._watchHandles.forEach((handle) => {
            handle.remove();
        });
        this._watchHandles = [];
    }
    render() {
        const { serviceUrl, strings, versionInfo } = this;
        const { viewModel: { executionError }, } = this;
        return ((0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { description: versionInfo ? versionInfo.versionIdentifier.name : "", heading: versionInfo ? strings.actions.editVersion : strings.actions.newVersion }, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { loading: this.state === "executing" }, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "div-content" }, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.input.versionName, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-text", { id: "inputName", maxLength: 62, value: versionInfo ? versionInfo.versionIdentifier.name.split(".")[1] : "" })), (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.input.versionDescription, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-text-area", { id: "inputDescription", resize: "vertical", value: versionInfo ? versionInfo.description : "" })), (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.input.versionAccess, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip-group", { id: "chipGroupAccessLevel", selectionMode: "single", label: "" }, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { selected: versionInfo?.access === "public" || !versionInfo, value: "public" }, strings.accessLevels.public), (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { selected: versionInfo?.access === "protected", value: "protected" }, strings.accessLevels.protected), (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { selected: versionInfo?.access === "private", value: "private" }, strings.accessLevels.private))), (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.input.versionOwner, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-text", { id: "inputOwner", disabled: !this.viewModel.advancedEditingUserTypeExtensionLookup.get(serviceUrl), value: versionInfo
                ? versionInfo.versionIdentifier.name.split(".")[0]
                : this.viewModel.userLookup.get(serviceUrl)?.toUpperCase() })), (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline", slot: "footer", width: "half", onClick: () => {
                void this.flowElement.back();
            } }, strings.actions.cancelSave), (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", width: "half", onClick: async () => {
                const textInputs = Array.from(this._hostElement.getElementsByTagName("calcite-input-text"));
                const inputDescription = this._hostElement.getElementsByTagName("calcite-text-area")[0];
                const inputName = textInputs.find((input) => input.id === "inputName");
                const inputOwner = textInputs.find((input) => input.id === "inputOwner");
                const chipGroupAccessLevel = Array.from(this._hostElement.getElementsByTagName("calcite-chip-group"))[0];
                const info = {
                    access: chipGroupAccessLevel.selectedItems[0].value,
                    description: inputDescription.value,
                    versionIdentifier: {
                        name: inputOwner.value !== "" ? `${inputOwner.value}.${inputName.value}` : inputName.value,
                        guid: versionInfo ? versionInfo.versionIdentifier.guid : "",
                    },
                };
                this.versionPropertiesSaveClickedEvent.emit({
                    serviceUrl,
                    versionInfo: info,
                });
            } }, strings.actions.saveVersion)), this.state === "failed" ? ((0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { class: "notice", closable: true, kind: "warning", open: true, scale: "s", slot: "footer" }, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this._getExecutionError(executionError)))) : undefined))));
    }
    _getExecutionError(executionError) {
        const { strings: { executionErrors }, } = this;
        switch (executionError) {
            case "no-advanced-editing-user-type-extension":
                return executionErrors.noAdvancedEditingUserTypeExtension;
            case "no-feature-service-found":
                return executionErrors.noFeatureServiceFound;
            case "no-valid-enterprise-version":
                return executionErrors.notValidEnterpriseVersion;
            case "no-valid-version-name":
                return executionErrors.invalidVersionName;
            default:
                return executionError;
        }
    }
    get _hostElement() { return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3Mvbm9kZV9tb2R1bGVzX2FyY2dpc19tYXAtY29tcG9uZW50c19kaXN0X2VzbV9hcmNnaXMtdmVyc2lvbi1tYW5hZ2VtZW50LXNlcnZpY2UtaXRlbV8yX2VudHJ5X2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzZHO0FBQzFDOztBQUVuRTtBQUNBO0FBQ0EsUUFBUSxxREFBZ0I7QUFDeEIsMkRBQTJELHFEQUFXO0FBQ3RFLDZDQUE2QyxxREFBVztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRLFFBQVEscURBQXVCO0FBQ3ZEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdURBQXVEO0FBQ3ZFLGNBQWMsZUFBZTtBQUM3QjtBQUNBLGdCQUFnQixxREFBQyxDQUFDLGlEQUFJLFFBQVEscURBQUMsb0JBQW9CLHNCQUFzQixFQUFFLHFEQUFDLHFCQUFxQiw0QkFBNEIsWUFBWTtBQUN6STtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRyxxREFBQyxzQkFBc0IsMEVBQTBFLFlBQVksR0FBRyxFQUFFLHFEQUFDO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixPQUFPLHFEQUFVO0FBQzFDOztBQUVBO0FBQ0E7QUFDQSxRQUFRLHFEQUFnQjtBQUN4QixpREFBaUQscURBQVc7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUSxRQUFRLHFEQUF1QjtBQUN2RDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQ0FBbUM7QUFDbkQsZ0JBQWdCLGFBQWEsZ0JBQWdCLElBQUk7QUFDakQsZ0JBQWdCLHFEQUFDLENBQUMsaURBQUksUUFBUSxxREFBQyx3QkFBd0IscUpBQXFKLEVBQUUscURBQUMsb0JBQW9CLHFDQUFxQyxFQUFFLHFEQUFDLFVBQVUsc0JBQXNCLEVBQUUscURBQUMsbURBQW1ELHFEQUFDLHlCQUF5Qiw0R0FBNEcsSUFBSSxxREFBQywwREFBMEQscURBQUMsd0JBQXdCLCtGQUErRixJQUFJLHFEQUFDLHFEQUFxRCxxREFBQyx5QkFBeUIsZ0VBQWdFLEVBQUUscURBQUMsbUJBQW1CLDZFQUE2RSxnQ0FBZ0MscURBQUMsbUJBQW1CLG1FQUFtRSxtQ0FBbUMscURBQUMsbUJBQW1CLCtEQUErRCxtQ0FBbUMscURBQUMsb0RBQW9ELHFEQUFDLHlCQUF5QjtBQUNwdkM7QUFDQSw0RUFBNEUsSUFBSSxxREFBQyxxQkFBcUI7QUFDdEc7QUFDQSxlQUFlLCtCQUErQixxREFBQyxxQkFBcUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGlCQUFpQixHQUFHLGdCQUFnQjtBQUMvRjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixlQUFlLDREQUE0RCxxREFBQyxxQkFBcUIsMEZBQTBGLEVBQUUscURBQUMsVUFBVSxpQkFBaUI7QUFDek47QUFDQTtBQUNBLGdCQUFnQixXQUFXLGlCQUFpQixJQUFJO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLE9BQU8scURBQVU7QUFDMUM7O0FBRWtMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXJjZ2lzL21hcC1jb21wb25lbnRzL2Rpc3QvZXNtL2FyY2dpcy12ZXJzaW9uLW1hbmFnZW1lbnQtc2VydmljZS1pdGVtXzIuZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVzcmksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogU2VlIGh0dHBzOi8vanMuYXJjZ2lzLmNvbS80LjMwL2VzcmkvY29weXJpZ2h0LnR4dCBmb3IgZGV0YWlscy5cbiAqIHY0LjMwLjAtbmV4dC4zN1xuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGMgYXMgY3JlYXRlRXZlbnQsIGgsIEggYXMgSG9zdCwgZyBhcyBnZXRFbGVtZW50IH0gZnJvbSAnLi9pbmRleC02ZTE3MmFhYy5qcyc7XG5pbXBvcnQgeyBpIGFzIGltcG9ydENvcmVSZWFjdGl2ZVV0aWxzIH0gZnJvbSAnLi9pbmRleC0wYmM1NWNhNS5qcyc7XG5cbmNvbnN0IEFyY2dpc1ZlcnNpb25NYW5hZ2VtZW50U2VydmljZUl0ZW0gPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLnZlcnNpb25JdGVtQWN0aW9uQ2xpY2tlZEV2ZW50V2l0aFNlcnZpY2VVcmwgPSBjcmVhdGVFdmVudCh0aGlzLCBcInZlcnNpb25JdGVtQWN0aW9uQ2xpY2tlZEV2ZW50V2l0aFNlcnZpY2VVcmxcIiwgNyk7XG4gICAgICAgIHRoaXMudmVyc2lvbkxpc3RBY3Rpb25DbGlja2VkRXZlbnQgPSBjcmVhdGVFdmVudCh0aGlzLCBcInZlcnNpb25MaXN0QWN0aW9uQ2xpY2tlZEV2ZW50XCIsIDcpO1xuICAgICAgICB0aGlzLl92ZXJzaW9uTGlzdEV2ZW50TGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl93YXRjaEhhbmRsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fdmVyc2lvbkl0ZW1BY3Rpb25DbGlja2VkRXZlbnRXaXRoU2VydmljZVVybCA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZlcnNpb25JdGVtQWN0aW9uQ2xpY2tlZEV2ZW50V2l0aFNlcnZpY2VVcmwuZW1pdChlLmRldGFpbCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3ZlcnNpb25MaXN0QWN0aW9uQ2xpY2tlZEV2ZW50ID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMudmVyc2lvbkxpc3RBY3Rpb25DbGlja2VkRXZlbnQuZW1pdChlLmRldGFpbCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZmxvd0VsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVhZGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zZXJ2aWNlVXJsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnN0cmluZ3MgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudmlld01vZGVsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhc3luYyBjb21wb25lbnREaWRMb2FkKCkge1xuICAgICAgICBjb25zdCB7IHdhdGNoIH0gPSBhd2FpdCBpbXBvcnRDb3JlUmVhY3RpdmVVdGlscygpO1xuICAgICAgICB0aGlzLl93YXRjaEhhbmRsZXMucHVzaCh3YXRjaCgoKSA9PiB0aGlzLnZpZXdNb2RlbC5zdGF0ZSwgKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnZpZXdNb2RlbC5zdGF0ZTtcbiAgICB9XG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuX3dhdGNoSGFuZGxlcy5mb3JFYWNoKChoYW5kbGUpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3dhdGNoSGFuZGxlcyA9IFtdO1xuICAgICAgICB0aGlzLl9yZW1vdmVWZXJzaW9uTGlzdEV2ZW50TGlzdGVuZXJzKHRoaXMuX3ZlcnNpb25MaXN0KTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGZsb3dFbGVtZW50LCBoZWFkaW5nLCBzZXJ2aWNlVXJsLCBzdHJpbmdzLCB2aWV3TW9kZWwgfSA9IHRoaXM7XG4gICAgICAgIGxldCB7IF92ZXJzaW9uTGlzdCB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2VydmljZU5hbWUgPSB2aWV3TW9kZWwuc2VydmljZU5hbWVMb29rdXAuZ2V0KHNlcnZpY2VVcmwpO1xuICAgICAgICByZXR1cm4gKGgoSG9zdCwgbnVsbCwgaChcImNhbGNpdGUtcGFuZWxcIiwgeyBoZWFkaW5nOiBzZXJ2aWNlTmFtZSB9LCBoKFwiY2FsY2l0ZS1hY3Rpb25cIiwgeyBpZDogYGFjdGlvbk1hbmFnZVZlcnNpb25zXyR7c2VydmljZU5hbWV9YCwgaWNvbjogXCJsaXN0XCIsIHNjYWxlOiBcInNcIiwgc2xvdDogXCJoZWFkZXItYWN0aW9ucy1lbmRcIiwgdGV4dDogXCJcIiwgb25DbGljazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHZpZXdNb2RlbC5nZXRWZXJzaW9uSW5mb3Moc2VydmljZVVybCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIF92ZXJzaW9uTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhcmNnaXMtdmVyc2lvbi1tYW5hZ2VtZW50LXZlcnNpb24tbGlzdFwiKTtcbiAgICAgICAgICAgICAgICBfdmVyc2lvbkxpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImNhbGNpdGVGbG93SXRlbUJhY2tcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBfdmVyc2lvbkxpc3QucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3ZlcnNpb25MaXN0LmhlYWRpbmcgPSBoZWFkaW5nO1xuICAgICAgICAgICAgICAgIF92ZXJzaW9uTGlzdC5zZXJ2aWNlVXJsID0gc2VydmljZVVybDtcbiAgICAgICAgICAgICAgICBfdmVyc2lvbkxpc3Quc2VydmljZU5hbWUgPSBzZXJ2aWNlTmFtZTtcbiAgICAgICAgICAgICAgICBfdmVyc2lvbkxpc3Quc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgICAgICAgICAgICAgX3ZlcnNpb25MaXN0LnVzZXJIYXNBZHZhbmNlZEVkaXRpbmdVc2VyVHlwZUV4dGVuc2lvbiA9XG4gICAgICAgICAgICAgICAgICAgIHZpZXdNb2RlbC5hZHZhbmNlZEVkaXRpbmdVc2VyVHlwZUV4dGVuc2lvbkxvb2t1cC5nZXQoc2VydmljZVVybCk7XG4gICAgICAgICAgICAgICAgX3ZlcnNpb25MaXN0LnZlcnNpb25JbmZvcyA9IHZpZXdNb2RlbC52ZXJzaW9uSW5mb0xvb2t1cC5nZXQoc2VydmljZVVybCk7XG4gICAgICAgICAgICAgICAgX3ZlcnNpb25MaXN0LnZpZXdNb2RlbCA9IHZpZXdNb2RlbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRWZXJzaW9uTGlzdEV2ZW50TGlzdGVuZXJzKF92ZXJzaW9uTGlzdCk7XG4gICAgICAgICAgICAgICAgZmxvd0VsZW1lbnQuYXBwZW5kKF92ZXJzaW9uTGlzdCk7XG4gICAgICAgICAgICB9IH0pLCBoKFwiY2FsY2l0ZS10b29sdGlwXCIsIHsgXCJvdmVybGF5LXBvc2l0aW9uaW5nXCI6IFwiZml4ZWRcIiwgcmVmZXJlbmNlRWxlbWVudDogYGFjdGlvbk1hbmFnZVZlcnNpb25zXyR7c2VydmljZU5hbWV9YCB9LCBoKFwic3BhblwiLCBudWxsLCBzdHJpbmdzLmhlYWRlcnMubWFuYWdlVmVyc2lvbnMpKSkpKTtcbiAgICB9XG4gICAgX2FkZFZlcnNpb25MaXN0RXZlbnRMaXN0ZW5lcnModmVyc2lvbkxpc3QpIHtcbiAgICAgICAgdmVyc2lvbkxpc3QuYWRkRXZlbnRMaXN0ZW5lcihcInZlcnNpb25JdGVtQWN0aW9uQ2xpY2tlZEV2ZW50V2l0aFNlcnZpY2VVcmxcIiwgdGhpcy5fdmVyc2lvbkl0ZW1BY3Rpb25DbGlja2VkRXZlbnRXaXRoU2VydmljZVVybCk7XG4gICAgICAgIHRoaXMuX3ZlcnNpb25MaXN0RXZlbnRMaXN0ZW5lcnMuc2V0KFwidmVyc2lvbkl0ZW1BY3Rpb25DbGlja2VkRXZlbnRXaXRoU2VydmljZVVybFwiLCB0aGlzLl92ZXJzaW9uSXRlbUFjdGlvbkNsaWNrZWRFdmVudFdpdGhTZXJ2aWNlVXJsKTtcbiAgICAgICAgdmVyc2lvbkxpc3QuYWRkRXZlbnRMaXN0ZW5lcihcInZlcnNpb25MaXN0QWN0aW9uQ2xpY2tlZEV2ZW50XCIsIHRoaXMuX3ZlcnNpb25MaXN0QWN0aW9uQ2xpY2tlZEV2ZW50KTtcbiAgICAgICAgdGhpcy5fdmVyc2lvbkxpc3RFdmVudExpc3RlbmVycy5zZXQoXCJ2ZXJzaW9uTGlzdEFjdGlvbkNsaWNrZWRFdmVudFwiLCB0aGlzLl92ZXJzaW9uTGlzdEFjdGlvbkNsaWNrZWRFdmVudCk7XG4gICAgfVxuICAgIF9yZW1vdmVWZXJzaW9uTGlzdEV2ZW50TGlzdGVuZXJzKHZlcnNpb25MaXN0KSB7XG4gICAgICAgIGZvciAoY29uc3QgW3R5cGUsIGxpc3RlbmVyXSBvZiB0aGlzLl92ZXJzaW9uTGlzdEV2ZW50TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICB2ZXJzaW9uTGlzdC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgX2hvc3RFbGVtZW50KCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcblxuY29uc3QgQXJjZ2lzVmVyc2lvbk1hbmFnZW1lbnRWZXJzaW9uUHJvcGVydGllcyA9IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgICAgIHRoaXMudmVyc2lvblByb3BlcnRpZXNTYXZlQ2xpY2tlZEV2ZW50ID0gY3JlYXRlRXZlbnQodGhpcywgXCJ2ZXJzaW9uUHJvcGVydGllc1NhdmVDbGlja2VkRXZlbnRcIiwgNyk7XG4gICAgICAgIHRoaXMuX3dhdGNoSGFuZGxlcyA9IFtdO1xuICAgICAgICB0aGlzLmZsb3dFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNlcnZpY2VVcmwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc3RyaW5ncyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy52ZXJzaW9uSW5mbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy52aWV3TW9kZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZXhlY3V0aW9uRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGFzeW5jIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudmlld01vZGVsLmdldFZlcnNpb25JbmZvcyh0aGlzLnNlcnZpY2VVcmwsIGZhbHNlKTtcbiAgICB9XG4gICAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgICAgIGNvbnN0IHsgd2F0Y2ggfSA9IGF3YWl0IGltcG9ydENvcmVSZWFjdGl2ZVV0aWxzKCk7XG4gICAgICAgIHRoaXMuX3dhdGNoSGFuZGxlcy5wdXNoKHdhdGNoKCgpID0+IHRoaXMudmlld01vZGVsLnN0YXRlLCAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5fd2F0Y2hIYW5kbGVzLmZvckVhY2goKGhhbmRsZSkgPT4ge1xuICAgICAgICAgICAgaGFuZGxlLnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fd2F0Y2hIYW5kbGVzID0gW107XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBzZXJ2aWNlVXJsLCBzdHJpbmdzLCB2ZXJzaW9uSW5mbyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyB2aWV3TW9kZWw6IHsgZXhlY3V0aW9uRXJyb3IgfSwgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoaChIb3N0LCBudWxsLCBoKFwiY2FsY2l0ZS1mbG93LWl0ZW1cIiwgeyBkZXNjcmlwdGlvbjogdmVyc2lvbkluZm8gPyB2ZXJzaW9uSW5mby52ZXJzaW9uSWRlbnRpZmllci5uYW1lIDogXCJcIiwgaGVhZGluZzogdmVyc2lvbkluZm8gPyBzdHJpbmdzLmFjdGlvbnMuZWRpdFZlcnNpb24gOiBzdHJpbmdzLmFjdGlvbnMubmV3VmVyc2lvbiB9LCBoKFwiY2FsY2l0ZS1wYW5lbFwiLCB7IGxvYWRpbmc6IHRoaXMuc3RhdGUgPT09IFwiZXhlY3V0aW5nXCIgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImRpdi1jb250ZW50XCIgfSwgaChcImNhbGNpdGUtbGFiZWxcIiwgbnVsbCwgc3RyaW5ncy5pbnB1dC52ZXJzaW9uTmFtZSwgaChcImNhbGNpdGUtaW5wdXQtdGV4dFwiLCB7IGlkOiBcImlucHV0TmFtZVwiLCBtYXhMZW5ndGg6IDYyLCB2YWx1ZTogdmVyc2lvbkluZm8gPyB2ZXJzaW9uSW5mby52ZXJzaW9uSWRlbnRpZmllci5uYW1lLnNwbGl0KFwiLlwiKVsxXSA6IFwiXCIgfSkpLCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCBzdHJpbmdzLmlucHV0LnZlcnNpb25EZXNjcmlwdGlvbiwgaChcImNhbGNpdGUtdGV4dC1hcmVhXCIsIHsgaWQ6IFwiaW5wdXREZXNjcmlwdGlvblwiLCByZXNpemU6IFwidmVydGljYWxcIiwgdmFsdWU6IHZlcnNpb25JbmZvID8gdmVyc2lvbkluZm8uZGVzY3JpcHRpb24gOiBcIlwiIH0pKSwgaChcImNhbGNpdGUtbGFiZWxcIiwgbnVsbCwgc3RyaW5ncy5pbnB1dC52ZXJzaW9uQWNjZXNzLCBoKFwiY2FsY2l0ZS1jaGlwLWdyb3VwXCIsIHsgaWQ6IFwiY2hpcEdyb3VwQWNjZXNzTGV2ZWxcIiwgc2VsZWN0aW9uTW9kZTogXCJzaW5nbGVcIiwgbGFiZWw6IFwiXCIgfSwgaChcImNhbGNpdGUtY2hpcFwiLCB7IHNlbGVjdGVkOiB2ZXJzaW9uSW5mbz8uYWNjZXNzID09PSBcInB1YmxpY1wiIHx8ICF2ZXJzaW9uSW5mbywgdmFsdWU6IFwicHVibGljXCIgfSwgc3RyaW5ncy5hY2Nlc3NMZXZlbHMucHVibGljKSwgaChcImNhbGNpdGUtY2hpcFwiLCB7IHNlbGVjdGVkOiB2ZXJzaW9uSW5mbz8uYWNjZXNzID09PSBcInByb3RlY3RlZFwiLCB2YWx1ZTogXCJwcm90ZWN0ZWRcIiB9LCBzdHJpbmdzLmFjY2Vzc0xldmVscy5wcm90ZWN0ZWQpLCBoKFwiY2FsY2l0ZS1jaGlwXCIsIHsgc2VsZWN0ZWQ6IHZlcnNpb25JbmZvPy5hY2Nlc3MgPT09IFwicHJpdmF0ZVwiLCB2YWx1ZTogXCJwcml2YXRlXCIgfSwgc3RyaW5ncy5hY2Nlc3NMZXZlbHMucHJpdmF0ZSkpKSwgaChcImNhbGNpdGUtbGFiZWxcIiwgbnVsbCwgc3RyaW5ncy5pbnB1dC52ZXJzaW9uT3duZXIsIGgoXCJjYWxjaXRlLWlucHV0LXRleHRcIiwgeyBpZDogXCJpbnB1dE93bmVyXCIsIGRpc2FibGVkOiAhdGhpcy52aWV3TW9kZWwuYWR2YW5jZWRFZGl0aW5nVXNlclR5cGVFeHRlbnNpb25Mb29rdXAuZ2V0KHNlcnZpY2VVcmwpLCB2YWx1ZTogdmVyc2lvbkluZm9cbiAgICAgICAgICAgICAgICA/IHZlcnNpb25JbmZvLnZlcnNpb25JZGVudGlmaWVyLm5hbWUuc3BsaXQoXCIuXCIpWzBdXG4gICAgICAgICAgICAgICAgOiB0aGlzLnZpZXdNb2RlbC51c2VyTG9va3VwLmdldChzZXJ2aWNlVXJsKT8udG9VcHBlckNhc2UoKSB9KSksIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IGFwcGVhcmFuY2U6IFwib3V0bGluZVwiLCBzbG90OiBcImZvb3RlclwiLCB3aWR0aDogXCJoYWxmXCIsIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB2b2lkIHRoaXMuZmxvd0VsZW1lbnQuYmFjaygpO1xuICAgICAgICAgICAgfSB9LCBzdHJpbmdzLmFjdGlvbnMuY2FuY2VsU2F2ZSksIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IHNsb3Q6IFwiZm9vdGVyXCIsIHdpZHRoOiBcImhhbGZcIiwgb25DbGljazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRJbnB1dHMgPSBBcnJheS5mcm9tKHRoaXMuX2hvc3RFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiY2FsY2l0ZS1pbnB1dC10ZXh0XCIpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnB1dERlc2NyaXB0aW9uID0gdGhpcy5faG9zdEVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJjYWxjaXRlLXRleHQtYXJlYVwiKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnB1dE5hbWUgPSB0ZXh0SW5wdXRzLmZpbmQoKGlucHV0KSA9PiBpbnB1dC5pZCA9PT0gXCJpbnB1dE5hbWVcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXRPd25lciA9IHRleHRJbnB1dHMuZmluZCgoaW5wdXQpID0+IGlucHV0LmlkID09PSBcImlucHV0T3duZXJcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpcEdyb3VwQWNjZXNzTGV2ZWwgPSBBcnJheS5mcm9tKHRoaXMuX2hvc3RFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiY2FsY2l0ZS1jaGlwLWdyb3VwXCIpKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICBhY2Nlc3M6IGNoaXBHcm91cEFjY2Vzc0xldmVsLnNlbGVjdGVkSXRlbXNbMF0udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBpbnB1dERlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uSWRlbnRpZmllcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogaW5wdXRPd25lci52YWx1ZSAhPT0gXCJcIiA/IGAke2lucHV0T3duZXIudmFsdWV9LiR7aW5wdXROYW1lLnZhbHVlfWAgOiBpbnB1dE5hbWUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBndWlkOiB2ZXJzaW9uSW5mbyA/IHZlcnNpb25JbmZvLnZlcnNpb25JZGVudGlmaWVyLmd1aWQgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy52ZXJzaW9uUHJvcGVydGllc1NhdmVDbGlja2VkRXZlbnQuZW1pdCh7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VVcmwsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb25JbmZvOiBpbmZvLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSB9LCBzdHJpbmdzLmFjdGlvbnMuc2F2ZVZlcnNpb24pKSwgdGhpcy5zdGF0ZSA9PT0gXCJmYWlsZWRcIiA/IChoKFwiY2FsY2l0ZS1ub3RpY2VcIiwgeyBjbGFzczogXCJub3RpY2VcIiwgY2xvc2FibGU6IHRydWUsIGtpbmQ6IFwid2FybmluZ1wiLCBvcGVuOiB0cnVlLCBzY2FsZTogXCJzXCIsIHNsb3Q6IFwiZm9vdGVyXCIgfSwgaChcImRpdlwiLCB7IHNsb3Q6IFwibWVzc2FnZVwiIH0sIHRoaXMuX2dldEV4ZWN1dGlvbkVycm9yKGV4ZWN1dGlvbkVycm9yKSkpKSA6IHVuZGVmaW5lZCkpKSk7XG4gICAgfVxuICAgIF9nZXRFeGVjdXRpb25FcnJvcihleGVjdXRpb25FcnJvcikge1xuICAgICAgICBjb25zdCB7IHN0cmluZ3M6IHsgZXhlY3V0aW9uRXJyb3JzIH0sIH0gPSB0aGlzO1xuICAgICAgICBzd2l0Y2ggKGV4ZWN1dGlvbkVycm9yKSB7XG4gICAgICAgICAgICBjYXNlIFwibm8tYWR2YW5jZWQtZWRpdGluZy11c2VyLXR5cGUtZXh0ZW5zaW9uXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGlvbkVycm9ycy5ub0FkdmFuY2VkRWRpdGluZ1VzZXJUeXBlRXh0ZW5zaW9uO1xuICAgICAgICAgICAgY2FzZSBcIm5vLWZlYXR1cmUtc2VydmljZS1mb3VuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBleGVjdXRpb25FcnJvcnMubm9GZWF0dXJlU2VydmljZUZvdW5kO1xuICAgICAgICAgICAgY2FzZSBcIm5vLXZhbGlkLWVudGVycHJpc2UtdmVyc2lvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBleGVjdXRpb25FcnJvcnMubm90VmFsaWRFbnRlcnByaXNlVmVyc2lvbjtcbiAgICAgICAgICAgIGNhc2UgXCJuby12YWxpZC12ZXJzaW9uLW5hbWVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhlY3V0aW9uRXJyb3JzLmludmFsaWRWZXJzaW9uTmFtZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGlvbkVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBfaG9zdEVsZW1lbnQoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuXG5leHBvcnQgeyBBcmNnaXNWZXJzaW9uTWFuYWdlbWVudFNlcnZpY2VJdGVtIGFzIGFyY2dpc192ZXJzaW9uX21hbmFnZW1lbnRfc2VydmljZV9pdGVtLCBBcmNnaXNWZXJzaW9uTWFuYWdlbWVudFZlcnNpb25Qcm9wZXJ0aWVzIGFzIGFyY2dpc192ZXJzaW9uX21hbmFnZW1lbnRfdmVyc2lvbl9wcm9wZXJ0aWVzIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=