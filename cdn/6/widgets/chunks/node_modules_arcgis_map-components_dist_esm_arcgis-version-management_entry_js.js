"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["node_modules_arcgis_map-components_dist_esm_arcgis-version-management_entry_js"],{

/***/ "./node_modules/@arcgis/map-components/dist/esm/arcgis-version-management.entry.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/esm/arcgis-version-management.entry.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_version_management: () => (/* binding */ ArcgisVersionManagement)
/* harmony export */ });
/* harmony import */ var _index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-6e172aac.js */ "./node_modules/@arcgis/map-components/dist/esm/index-6e172aac.js");
/* harmony import */ var _index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-0bc55ca5.js */ "./node_modules/@arcgis/map-components/dist/esm/index-0bc55ca5.js");
/* harmony import */ var _chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-WQTCUXBS-9ec3781a.js */ "./node_modules/@arcgis/map-components/dist/esm/chunk-WQTCUXBS-9ec3781a.js");
/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */




const versionManagementCss = ".div-content{background-color:var(--calcite-ui-foreground-1);padding:0.75rem}.flow-main{width:330px}.notice{width:-webkit-fill-available}.panel-services{max-height:400px}.panel-versions{max-height:400px}";

const ArcgisVersionManagement = class {
    constructor(hostRef) {
        (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.manager = (0,_chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.u)(this);
        this._watchHandles = [];
        this.label = undefined;
        this.position = "top-right";
        this.view = undefined;
        this.messages = this.manager.readonly((0,_chunk_WQTCUXBS_9ec3781a_js__WEBPACK_IMPORTED_MODULE_2__.c)({ blocking: true }));
        this.state = undefined;
    }
    positionWatcher(newValue) {
        if (newValue !== undefined && this.viewModel) {
            this.view.ui.move(this.el, newValue);
        }
    }
    async componentDidLoad() {
        const { watch } = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.i)();
        this._watchHandles.push(watch(() => this.viewModel.state, (state) => {
            this.state = state;
        }));
    }
    async componentWillLoad() {
        await this._checkForView();
        this.viewModel = await (0,_index_0bc55ca5_js__WEBPACK_IMPORTED_MODULE_1__.a5)({
            view: this.view,
        });
        this.label = this.label ? this.label : this.messages.label;
    }
    disconnectedCallback() {
        this._watchHandles.forEach((handle) => {
            handle.remove();
        });
        this._watchHandles = [];
    }
    render() {
        const { messages, label, viewModel, viewModel: { state, loadError }, } = this;
        const arrayServiceNames = Array.from(this.viewModel.serviceNameLookup, ([url, name]) => ({ url, name }));
        return ((0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { ref: (node) => {
                this.flowElement = node;
            }, class: "flow-main" }, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: label }, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { class: "panel-services", loading: state === "loading" }, arrayServiceNames.map((service) => ((0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-version-management-service-item", { flowElement: this.flowElement, heading: label, serviceUrl: service.url, strings: messages, viewModel: viewModel, onVersionItemActionClickedEventWithServiceUrl: (e) => {
                if (this.flowElement) {
                    this._handleVersionItemActionClick(e, this.flowElement);
                }
            }, onVersionListActionClickedEvent: (e) => {
                if (this.flowElement) {
                    this._handleVersionListActionClick(e, this.flowElement);
                }
            } }))), state === "disabled" ? ((0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { class: "notice", closable: false, kind: "warning", open: true, scale: "s", slot: "footer" }, (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this._getLoadError(loadError)))) : undefined)))));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    async _checkForView() {
        const viewRef = this.el.closest("arcgis-map");
        if (viewRef?.view) {
            await viewRef.view.map.load();
            this.view = viewRef.view;
            this.view.ui.add(this.el, this.position);
        }
    }
    _createVersionPropertiesFlow(serviceUrl, versionInfo) {
        const { flowElement, viewModel } = this;
        if (!flowElement) {
            return null;
        }
        const versionPropertiesFlow = document.createElement("arcgis-version-management-version-properties");
        versionPropertiesFlow.flowElement = flowElement;
        versionPropertiesFlow.serviceUrl = serviceUrl;
        versionPropertiesFlow.strings = this.messages;
        versionPropertiesFlow.versionInfo = versionInfo;
        versionPropertiesFlow.viewModel = viewModel;
        versionPropertiesFlow.addEventListener("versionPropertiesSaveClickedEvent", async (e) => {
            const { serviceUrl, versionInfo } = e.detail;
            const fullVersionName = versionInfo.versionIdentifier.name;
            const versionName = fullVersionName.split(".").length > 1 ? fullVersionName.split(".")[1] : fullVersionName;
            const ownerName = fullVersionName.split(".").length > 1 ? fullVersionName.split(".")[0] : viewModel.userLookup.get(serviceUrl);
            if (versionInfo.versionIdentifier.guid === "") {
                await viewModel.createVersion({
                    access: versionInfo.access,
                    description: versionInfo.description,
                    featureServerUrl: serviceUrl,
                    ownerName,
                    versionName,
                });
            }
            else {
                await viewModel.alterVersion({
                    access: versionInfo.access,
                    description: versionInfo.description,
                    featureServerUrl: serviceUrl,
                    ownerName,
                    versionIdentifier: {
                        name: "",
                        guid: versionInfo.versionIdentifier.guid,
                    },
                    versionName,
                });
            }
            if (viewModel.state === "ready") {
                const versionList = flowElement.getElementsByTagName("arcgis-version-management-version-list")[0];
                versionList.versionInfos = [];
                const versionInfos = await viewModel.getVersionInfos(serviceUrl, true);
                versionList.versionInfos = versionInfos;
                await flowElement.back();
            }
        });
        return versionPropertiesFlow;
    }
    _getLoadError(loadError) {
        const { messages } = this;
        switch (loadError) {
            case "no-feature-services":
                return messages.loadErrors.noFeatureServices;
            case "no-layers-property":
                return messages.loadErrors.noLayersProperty;
            default:
                return loadError;
        }
    }
    async _handleVersionItemActionClick(e, flowElement) {
        const { actionType, serviceUrl, versionInfo } = e.detail;
        switch (actionType) {
            case "changeVersion":
                await this._switchToVersion(serviceUrl, versionInfo.versionIdentifier.name, versionInfo.versionIdentifier.guid);
                break;
            case "editVersion": {
                const versionPropertiesFlow = this._createVersionPropertiesFlow(serviceUrl, versionInfo);
                if (versionPropertiesFlow) {
                    flowElement.append(versionPropertiesFlow);
                }
                break;
            }
        }
    }
    async _handleVersionListActionClick(e, flowElement) {
        const { actionType, serviceUrl } = e.detail;
        switch (actionType) {
            case "newVersion": {
                const versionPropertiesFlow = this._createVersionPropertiesFlow(serviceUrl, undefined);
                if (versionPropertiesFlow) {
                    flowElement.append(versionPropertiesFlow);
                }
                break;
            }
            case "refreshVersions": {
                if (this.flowElement) {
                    const versionList = this.flowElement.getElementsByTagName("arcgis-version-management-version-list")[0];
                    versionList.versionInfos = [];
                    const versionInfos = await this.viewModel.getVersionInfos(serviceUrl, true);
                    versionList.versionInfos = versionInfos;
                }
                break;
            }
        }
    }
    async _switchToVersion(featureServerUrl, toVersionName, toVersionGuid) {
        await this.viewModel.changeVersion(featureServerUrl, toVersionName, toVersionGuid);
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return (0,_index_6e172aac_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "position": ["positionWatcher"]
    }; }
};
ArcgisVersionManagement.style = versionManagementCss;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,